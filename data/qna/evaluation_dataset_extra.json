{
    "qa_pairs": [
          {
            "question": "How can I run a Spark job to compute Cube Indicators manually from the terminal?",
            "answer": "To manually execute Cube Indicators:\n1. SSH and switch to intra user:\n```bash\nssh un1.bigdata.abc.gr\nsudo -i -u intra\n```\n2. Navigate to project directory:\n```bash\ncd projects/cube_ind\n```\n3. Refresh the PySpark script:\n```bash\nrm Indicators_Spark_Job.py\nkinit -kt /home/intra/intra.keytab intra\nhdfs dfs -get /user/intra/cube/Indicators_Spark_Job.py\n```\n4. Edit `run_cube.sh` to set the correct execution date:\n```bash\nvim run_cube.sh\n```\n5. Run the job:\n```bash\n./run_cube.sh\n```",
            "category": "Application Functionality & Flow",
            "files": "execute_indicators_terminal.md",
            "context": "---\ntitle: \"Execute Cube Indicators via Terminal\"\ndescription: \"Instructions for manually executing the Cube Indicators Spark job from terminal on un1.bigdata.abc.gr, including how to pull the latest script, modify execution date, and run the submit script.\"\ntags:\n  - cube indicators\n  - spark job\n  - pyspark\n  - hdfs\n  - brond\n  - manual execution\n  - terminal\n  - big data\n  - intra\n---\n# Execute Cube Indicators via Terminal\nThis guide explains how to manually run the Cube Indicators Spark job for missing dates from the terminal. It includes pulling the latest script from HDFS, updating the execution date, and submitting the job.\n1. SSH into `un1.bigdata.abc.gr` and switch to the `intra` user:\n```bash\nssh un1.bigdata.abc.gr\nsudo -i -u intra\n```\n2. Navigate to the working directory:\n```bash\ncd projects/cube_ind\n```\n3. Remove the old PySpark script:\n```bash\nrm Indicators_Spark_Job.py\n```\n4. Authenticate with Kerberos and fetch the updated script from HDFS:\n```bash\nkinit -kt /home/intra/intra.keytab intra\nhdfs dfs -get /user/intra/cube/Indicators_Spark_Job.py\n```\n6. Edit submit script to change execution date. The execution date should be 2 days after the missing data date.\nFor example, to load data for 2021-01-01, set the execution date to 2021-01-03.\n```bash\nvim run_cube.sh\n```\nUpdate the relevant line:\n```bash\n...verhead=4096 Indicators_Spark_Job.py <date> brond.dsl_s...\n```\n7. Run the Spark job:\n```bash\n./run_cube.sh\n```\n---\ntags:\n  - cube indicators\n  - pyspark\n  - spark job\n  - brond\n  - manual data load\n  - hdfs\n  - intra\n---"
          },
          {
            "question": "What is the process for identifying and resolving duplicate records in the `energy_efficiency.cell` table?",
            "answer": "To identify and resolve duplicates in `energy_efficiency.cell`:\n1. Run this Impala query to check partition counts:\n```sql\nSELECT count(*), par_dt \nFROM energy_efficiency.cell \nWHERE par_dt > '202111201' \nGROUP BY par_dt \nORDER BY par_dt DESC;\n```\n2. Check for duplicates:\n```sql\nSELECT count(*) FROM (\n  SELECT DISTINCT * \n  FROM energy_efficiency.cell \n  WHERE par_dt = '20211210'\n) a;\n```\n3. Backup, deduplicate, and overwrite:\n```sql\nCREATE TABLE energy_efficiency.cell_bak LIKE energy_efficiency.cell;\nINSERT INTO TABLE energy_efficiency.cell_bak PARTITION (par_dt)\nSELECT * FROM energy_efficiency.cell;\n\nINSERT OVERWRITE TABLE energy_efficiency.cell PARTITION (par_dt)\nSELECT DISTINCT * \nFROM energy_efficiency.cell \nWHERE par_dt BETWEEN '20211210' AND '20211215';\n\nDROP TABLE energy_efficiency.cell_bak;\n```",
            "category": "Data Management & Query Execution",
            "files": "fix_energy_efficiency_duplicates.md",
            "context": "---\ntitle: \"Streamsets \u2013 Energy Efficiency Duplicate Resolution\"\ndescription: \"Guide for accessing Streamsets for the Energy Efficiency pipeline and resolving duplicates in the 'energy_efficiency.cell' table using Impala.\"\ntags:\n  - streamsets\n  - energy efficiency\n  - duplicates\n  - impala\n  - sftp\n  - hive\n  - overwrite\n  - bigd\n  - par_dt\n  - cell table\n  - un2\n---\n# Streamsets - Energy Efficiency\nThis guide outlines how to access Streamsets for the Energy Efficiency pipeline, detect duplicate records in the `energy_efficiency.cell` table using Impala, and safely remove them by overwriting partitions.\n## Streamsets Access\n- **Login URL**: [https://999.999.999.999:18636/](https://999.999.999.999:18636/)\n- **File Transfer (from `un2` using `sdc` user)**:\n```bash\nsftp bigd@999.999.999.999\ncd /ossrc\n```\n## Check for Duplicates in Table\nRun the following Impala queries to inspect duplicate records in the energy_efficiency.cell table:\n```sql\n-- Total rows by partition\nSELECT count(*), par_dt \nFROM energy_efficiency.cell \nWHERE par_dt > '202111201' \nGROUP BY par_dt \nORDER BY par_dt DESC;\n-- Check for duplicates on a specific date\nSELECT count(*) \nFROM (\n  SELECT DISTINCT * \n  FROM energy_efficiency.cell \n  WHERE par_dt = '20211210'\n) a;\n```\n## Reolve Duplicates\n### 1. Create a Backup Table\n```sql\nCREATE TABLE energy_efficiency.cell_bak LIKE energy_efficiency.cell;\nINSERT INTO TABLE energy_efficiency.cell_bak PARTITION (par_dt)\nSELECT * FROM energy_efficiency.cell;\n```\n### 2. Overwrite the Original Table\nUpdate the table using only distinct records for the specified partition range:\n```sql\nINSERT OVERWRITE TABLE energy_efficiency.cell PARTITION (par_dt)\nSELECT DISTINCT * \nFROM energy_efficiency.cell \nWHERE par_dt BETWEEN '20211210' AND '20211215';\n```\n### 3. Drop the Backup Table (if cleanup confirmed)\n```sql\nDROP TABLE energy_efficiency.cell_bak;\n```\n---\ntags:\n  - streamsets\n  - impala\n  - hive\n  - data deduplication\n  - energy efficiency\n  - par_dt\n  - partition overwrite\n  - data cleanup\n  - sftp access\n---"
          },
          {
            "question": "What steps are involved in benchmarking HBase with YCSB including read quotas?",
            "answer": "1. Create and pre-split the table:\n```bash\nhbase shell\ncreate 'usertable', 'family', { SPLITS => (1..300).map { |i| \"user#{1000 + i * (9999 - 1000) / 300}\" } }\n```\n2. Load YCSB workload:\n```bash\nbin/ycsb load hbase20 -P workloads/workloada -cp /HBASE-HOME-DIR/conf -p table=usertable -p columnfamily=family\n```\n3. Run benchmark:\n```bash\nbin/ycsb run hbase20 -P workloads/workloada -cp /HBASE-HOME-DIR/conf -p table=usertable -p columnfamily=family -p measurementtype=timeseries -p timeseries.granularity=1000 -s > workloada.dat\n```\n4. To test with quotas, create namespace and apply quota:\n```bash\nhbase shell\ncreate_namespace 'quotas_test'\nset_quota TYPE => THROTTLE, THROTTLE_TYPE => READ, NAMESPACE => 'quotas_test', LIMIT => '20req/sec'\n```",
            "category": "Infrastructure & Deployment",
            "files": "hbase_benchmarking.md",
            "context": "---\ntitle: Benchmarking HBase Performance with YCSB on Lab\ndescription: Procedure to benchmark HBase performance using YCSB on the lab environment with and without quotas applied, including setup, workload execution, and quota testing for read and write limits.\ntags:\n  - hbase\n  - ycsb\n  - benchmarking\n  - quotas\n  - read-quota\n  - write-quota\n  - lab\n  - performance-testing\n  - bigstreamer\nlast_updated: 2025-05-01\nauthor: ilpap\ncontext:\n  environment: BigStreamer Lab\n  system: jakarta\n  host_ip: 999.999.999.999\n  tool: YCSB 0.17.0\n  table_name: usertable\n  namespaces:\n    - default\n    - quotas_test\n  quotas:\n    - read: 20req/sec\n    - write: 20req/sec\n  workloads: [workloada, workloadb, workloadc, workloadd, workloade, workloadf]\n  hbase_config_path: /HBASE-HOME-DIR/conf\n---\n# Benchmarking HBASE on Lab with YCSB Tool\n## Introduction\nOur purpose was to run performance tests on a created Hbase table on Lab environment and document the results which will be used as a point of reference to evaluate the efficacy of quotas that will be applied. After running tests with no quotas, we run the same tests after setting firstly read throtttle quotas and secondly write quotas. We implemented the following procedure on jakarta node (999.999.999.999). Kinit with hbase keytab was a prerequisite.\n## Create and Pre-Split HBase Table\nThis section creates the usertable using pre-splitting to distribute load evenly across regionservers.\n- Created an hbase table using pre-splitting strategy to ensure write operations target region servers uniformly\n```bash\nhbase shell\nn_splits = 300 # HBase recommends (10 * number of regionservers, in our case 3 regionservers)\ncreate 'usertable', 'family', { SPLITS => (1..n_splits).map { |i| \"user#{1000 + i * (9999 - 1000) / n_splits}\" } }\n```\n## Install and Configure YCSB\nThis section describes downloading YCSB, extracting it, and pointing it to the HBase configuration directory.\n- Get latest release of ycsb-0.17.0.tar.gz from https://github.com/brianfrankcooper/YCSB/releases/tag/0.17.0 on jakarta\n- Unzip file\n```bash\ntar xfvz ycsb-0.17.0.tar.gz\n```\n- Specify a HBase config directory containing  hbase-site.xml\n```bash\nmkdir -p  /HBASE-HOME-DIR/conf\ncd /HBASE-HOME-DIR/conf\ncp /etc/hbase/conf/hbase-site.xml .\n```\n- Get to YCSB directory\n```bash\ncd ycsb-0.17.0\n```\n## Baseline HBase Performance Without Quotas\nRun workloads A\u2013F with YCSB against HBase before applying any read/write quotas to establish baseline metrics.\n- Load the data\n```bash\nbin/ycsb load hbase20 -P workloads/workloada -cp /HBASE-HOME-DIR/conf -p table=usertable -p columnfamily=family\n```\n- Execute the workload requesting a time series with 1 sec granularity and directing output to a datafile\n```bash\nbin/ycsb run hbase20 -P workloads/workloada -cp /HBASE-HOME-DIR/conf -p table=usertable -p columnfamily=family -p measurementtype=timeseries -p timeseries.granularity=1000 -s > workloada.dat\n```\n- Delete and recreate table to repeat the aforementioned steps with workload{b-f} changing workload and datafiles respectively\n```bash\nhbase shell\ndisable 'usertable'\ndrop 'usertable'\nexists 'usertable'\nn_splits = 300\ncreate 'usertable', 'family', { SPLITS => (1..n_splits).map { |i| \"user#{1000 + i * (9999 - 1000) / n_splits}\" } }\n```\n## Apply Read Quotas on HBase Namespace\nCreate a new HBase namespace and apply read throttle quotas to test impact on performance.\n- Create namespace\n```bash\nhbase shell\ncreate_namespace 'quotas_test'\nlist_namespace\n```\n- Create table in the namespace\n```bash\nhbase shell\nn_splits = 300 # HBase recommends (10 * number of regionservers, in our case 3 regionservers)\ncreate 'quotas_test:usertable', 'family', {SPLITS => (1..n_splits).map {|i| \"user#{1000+i*(9999-1000)/n_splits}\"}\n```\n- Set throttle quotas of type 'read'\n```bash\nhbase shell\nset_quota TYPE => THROTTLE, THROTTLE_TYPE => READ, NAMESPACE => 'quotas_test', LIMIT => '20req/sec'\nlist_quotas\n```\n## Test Read Performance with Quotas Applied\n- Load the data\n```bash\nbin/ycsb load hbase20 -P workloads/workloada -cp /HBASE-HOME-DIR/conf -p table='quotas_test:usertable' -p columnfamily=family\n```\n- Execute the workload requesting a time series with 1 sec granularity and directing output to a datafile\n```bash\nbin/ycsb run hbase20 -P workloads/workloada -cp /HBASE-HOME-DIR/conf -p table='quotas_test:usertable' -p columnfamily=family -p measurementtype=timeseries -p timeseries.granularity=1000 -s > workloada_read_quotas.dat\n```\n- Delete and recreate table to repeat the aforementioned steps with workload{b-f} changing workload and datafiles respectively\n```bash\nhbase shell\ndisable 'quotas_test:usertable'\ndrop 'quotas_test:usertable'\nexists 'quotas_test:usertable'\nn_splits = 300\ncreate 'quotas_test:usertable', 'family', {SPLITS => (1..n_splits).map {|i| \"user#{1000+i*(9999-1000)/n_splits}\"}\n```\n## Switch from Read to Write Quotas\nRemove read quotas and apply write quotas to the same namespace for comparative benchmarking.\n- Remove read quotas\n```bash\nhbase shell\nset_quota TYPE => THROTTLE, NAMESPACE => 'quotas_test', LIMIT => NONE\nlist_quotas\n```\n- Set write quotas\n```bash\nhbase shell\nset_quota TYPE => THROTTLE, THROTTLE_TYPE => WRITE, NAMESPACE => 'quotas_test', LIMIT => '20req/sec'\nlist_quotas\n```\n-  Delete and recreate table to repeat to run tests with write quotas\n```bash\nhbase shell\ndisable 'quotas_test:usertable'\ndrop 'quotas_test:usertable'\nexists 'quotas_test:usertable'\nn_splits = 300\ncreate 'quotas_test:usertable', 'family', {SPLITS => (1..n_splits).map {|i| \"user#{1000+i*(9999-1000)/n_splits}\"}\n```\n## Test Write Performance with Quotas Applied\n- Load the data\n```bash\nbin/ycsb load hbase20 -P workloads/workloada -cp /HBASE-HOME-DIR/conf -p table='quotas_test:usertable' -p columnfamily=family\n```\n- Execute the workload requesting a time series with 1 sec granularity and directing output to a datafile\n```bash\nbin/ycsb run hbase20 -P workloads/workloada -cp /HBASE-HOME-DIR/conf -p table='quotas_test:usertable' -p columnfamily=family -p measurementtype=timeseries -p timeseries.granularity=1000 -s > workloada_write_quotas.dat\n```\n- Delete and recreate table to repeat the aforementioned steps with workload{b-f} changing workload and datafiles respectively\n```bash\nhbase shell\ndisable 'quotas_test:usertable'\ndrop 'quotas_test:usertable'\nexists 'quotas_test:usertable'\nn_splits = 300\ncreate 'quotas_test:usertable', 'family', {SPLITS => (1..n_splits).map {|i| \"user#{1000+i*(9999-1000)/n_splits}\"}\n```\n**References:**\nhttps://github.com/brianfrankcooper/YCSB#ycsb\nhttps://github.com/brianfrankcooper/YCSB/tree/master/hbase2\nhttps://github.com/brianfrankcooper/YCSB/wiki/Running-a-Workload\nhttps://github.com/brianfrankcooper/YCSB/wiki/Core-Workloads\nhttps://blog.cloudera.com/hbase-performance-testing-using-ycsb/"
          },
          {
            "question": "How is the DWHFixed full ETL pipeline configured from Oracle to Hive and Impala?",
            "answer": "The DWHFixed full ETL pipeline executes at 15:30 and 18:30 UTC:\n1. Sqoop imports data from Oracle:\n```bash\nsqoop import --connect jdbc:oracle:thin:@... --username dm_sas_va --password-file jceks://hdfs/user/dwhfixed/dwhfixed --table SAS_VA_VIEW.V_DSLAM_DIM\n```\n2. Load into Hive using Beeline:\n```bash\nbeeline -u 'jdbc:hive2://...' -e 'LOAD DATA INPATH ... INTO TABLE dwhfixed.v_dslam_dim_hist PARTITION(par_dt=...)'\n```\n3. Refresh Impala:\n```bash\nimpala-shell -q 'REFRESH dwhfixed.v_dslam_dim_hist;'\n```",
            "category": "Data Management & Query Execution",
            "files": "dwhfixed.md",
            "context": "---\ntitle: DWHFixed Full and Delta Load \u2013 Oracle to Hive/Impala ETL\ndescription: Daily and bi-hourly ETL flows for ingesting data from Oracle SAS_VA views to Hive and Impala using Sqoop, Beeline, and Impala-shell, with monitoring, logging, retry mechanisms, and Grafana dashboards.\njob_name: FULL / DELTA\ncomponent: DWHFixed\nsystem: BigStreamer\nhost: un-vip.bigdata.abc.gr\nsource: Oracle (SAS_VA_VIEW)\ntarget_system: Hive / Impala\ntarget_tables: dwhfixed.*_hist\ncoordinator_full: DWHFixed - Full Coordinator\nworkflow_full: DWHFixed - Full Workflow\ncoordinator_delta: DWHFixed - Delta Coordinator\nworkflow_delta: DWHFixed - Delta Workflow\noracle_user: dm_sas_va\noracle_password_link: https://metis.ghi.com/obss/oss/sysadmin-group/support/-/blob/master/KnowledgeBase/abc/devpasswd.kdbx\nexecution_schedule_full: Daily at 15:30 & 18:30 UTC\nexecution_schedule_delta: Every 2 hours from 01:30 to 23:30 UTC\nhdfs_paths:\n  full: /user/dwhfixed/full\n  delta: /user/dwhfixed/delta\n  config: /user/dwhfixed/dwhfixed.config\n  log: /user/dwhfixed/log\n  retention: /user/dwhfixed/HDFS_LOG_Retention\nmonitoring:\n  application: DWHFIXED\n  api_url: http://un-vip.bigdata.abc.gr:12800/monitoring/api/jobstatus/find\n  dashboard: https://unc1.bigdata.abc.gr:3000/d/DNM-sBo4z/dwhfixed-dashboard?orgId=1&from=now-2d&to=now\nhue_login_user: dwhfixed\nalert_subject_format: DWHFIXED - {FULL|DELTA}: FAILED\nalert_source_system: Oracle\nalert_target_system: Hive / Impala\nretention_policy_days: 9\nowner: dwhfixed\nkeywords:\n  - oracle\n  - hive\n  - impala\n  - sqoop\n  - beeline\n  - impala-shell\n  - hdfs\n  - monitoring\n  - grafana\n  - full load\n  - delta load\n  - partitioned data\n  - devpasswd\n  - SAS_VA_VIEW\n  - jdbc\n  - load failure alerts\n  - control table\n  - jceks\n  - oozie\n  - retry\n  - logging\n  - alerting\n  - automation\n  - curl monitoring\n  - log retention\n  - hue workflows\n---\n# Full Load\nThis section describes the full data pipeline executed twice daily, transferring data from Oracle SAS_VA views to partitioned Hive/Impala history tables via Sqoop and Beeline.\n- **USER**: `dwhfixed`\n- **HUE WORKFLOW**: `DWHFixed - Full Workflow`, \n- **COORDINATOR**: `DWHFixed - Full Coordinator`\n- **HDFS path**: `/user/dwhfixed/full`\n- **Runs**: `15:30, 18:30 (UTC)` \n- **Config file**: `hdfs: /user/dwhfixed/dwhfixed.config`\n- **Tables config/list**: `hdfs: /user/dwhfixed/full/tables_full.config`\n- **Oracle user**: `dm_sas_va`\n- **Oracle pass**: `https://metis.ghi.com/obss/oss/sysadmin-group/support/-/blob/master/KnowledgeBase/abc/devpasswd.kdbx`. You need password to open this file and get the user's password.\nMoves data from the source tables to a `yesterday` partition of the target tables.\n## Oracle Tables (source)\nThese are the source tables in Oracle used in the Full Load process. The data from each table is transferred to Hive/Impala with daily partitions.\n- `SAS_VA_VIEW.V_BOX_DIM`\n- `SAS_VA_VIEW.V_FIXED_CABLE_DIM`\n- `SAS_VA_VIEW.V_KV_DIM`\n- `SAS_VA_VIEW.V_DSLAM_DIM`\n- `SAS_VA_VIEW.V_SR_TYPE_DIM`\n- `SAS_VA_VIEW.V_SRIA_ADDINFO_DIM`\n- `SAS_VA_VIEW.V_SRIA_STATUS_DIM`\n- `SAS_VA_VIEW.V_SRIA_SERV_PRODUCT_CAT_DIM`\n- `SAS_VA_VIEW.V_SRIA_PRIORITY_DIM`\n- `SAS_VA_VIEW.V_PROVIDER_DIM`\n- `SAS_VA_VIEW.V_def_NETWORK_DIM`\n- `SAS_VA_VIEW.V_def_DIVISION_DIM`\n- `SAS_VA_VIEW.V_SRIA_TYPE_DIM`\n- `SAS_VA_VIEW.V_SRIA_ACT_STATUS_DIM`\n- `SAS_VA_VIEW.V_SRIA_SUBAREA_DIM`\n- `SAS_VA_VIEW.V_POSITION_DIM`\n- `SAS_VA_VIEW.V_CAUSE_DIM`\n- `SAS_VA_VIEW.V_ACTION_DIM`\n- `SAS_VA_VIEW.V_ADSL_DIM`\n- `SAS_VA_VIEW.V_SRIA_AREA_DIM`\n## Hive - Impala Tables (target)\nThese are the target history tables in Hive and Impala, where data is written using LOAD DATA INPATH and REFRESH statements.\n- `dwhfixed.v_box_dim_hist`\n- `dwhfixed.v_fixed_cable_dim_hist`\n- `dwhfixed.v_kv_dim_hist`\n- `dwhfixed.v_dslam_dim_hist`\n- `dwhfixed.v_sr_type_dim_hist`\n- `dwhfixed.v_sria_addinfo_dim_hist`\n- `dwhfixed.v_sria_status_dim_hist`\n- `dwhfixed.v_sria_serv_product_cat_dim_hist`\n- `dwhfixed.v_sria_priority_dim_hist`\n- `dwhfixed.v_provider_dim_hist`\n- `dwhfixed.v_def_network_dim_hist`\n- `dwhfixed.v_def_division_dim_hist`\n- `dwhfixed.v_sria_type_dim_hist`\n- `dwhfixed.v_sria_act_status_dim_hist`\n- `dwhfixed.v_sria_subarea_dim_hist`\n- `dwhfixed.v_position_dim_hist`\n- `dwhfixed.v_cause_dim__hist`\n- `dwhfixed.v_action_dim_hist`\n- `dwhfixed.v_adsl_dim_hist`\n- `dwhfixed.v_sria_area_dim_hist`\n## Data Flow\nThe diagram below illustrates the end-to-end data movement from Oracle to Hive and Impala using Sqoop, Beeline, and Impala-shell.\n``` mermaid\n    graph TD\n        A1(<b>Oracle Table</b>)\n        A2(\"<b>HDFS</b> <br> /user/hive/warehouse/dwhfixed.db/landing_zone/{table_name}\")\n        A3(<b>Hive table</b>)\n        A4(\"<b>Impala table</b>\")\n\n        A1 --> |\"\"\"<b>sqoop: import</b> <br> \n                jdbc:oracle:thin:@999.999.999.999:6644/DWHPRD <br>\n                user: dm_sas_va <br>\n                password file jceks://hdfs/user/dwhfixed/dwhfixed <br>\n                password-alias: dm_sas_va.pass\"\"\"| A2\n        A2 --> |\"<b>beeline: load data inpath</b>  <br>\n                 un-vip.bigdata.abc.gr:10000/default\"| A3\n        A3 --> |\"<b>impala-shell: refresh</b> <br>\n                 un-vip.bigdata.abc.gr\"| A4\n```\n## Logs\nLogs for each execution of the workflow can be viewed in the Hue interface under the dwhfixed user, or in HDFS log paths for historical runs.\nApplication logs can be found in each Workflow in Hue as user `dwhfixed`. Oozie Coordinator result can be seen into HUE (login as `dwhfixed` user) and go to `Jobs -> Workflows` and look for `DWHFixed - Full Workflow`\n## Monitoring messages\nThis section explains how monitoring tracks execution status for each table and component. Each job run has a unique executionId.\n- All monitoring messages have the following constant values:\\\n  **application=DWHFIXED**\\\n  **job=FULL**\n- All monitoring messages of the same execution have a **unique executionId**\n- Every component of one execution has a unique row that is updated between the following status values: RUNNING to SUCCESS or FAILED.\n```mermaid\n    graph TD\n        A1(\"component=MAIN_START_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n        A2(\"component=SQOOP_IMPORT_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n        A3(\"component=BEELINE_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n        A4(\"component=IMPALA_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n        A5(\"component=MAIN_END_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n\n        A1 --> A2\n        A2 --> A3\n        A3 --> A4\n        A4 --> A5\n```\n- Check monitoring app for successful executions:  \nFrom `un2` with personal account:\n``` bash\ncurl --location --request GET 'http://un-vip.bigdata.abc.gr:12800/monitoring/api/jobstatus/find?application=DWHFIXED&job=FULL$status=SUCCESS&operativePartition=<timestamp e.g.:20220518>'\n```\n- Check monitoring app for failed executions:  \nFrom `un2` with personal account:\n``` bash\ncurl --location --request GET 'http://un-vip.bigdata.abc.gr:12800/monitoring/api/jobstatus/find?application=DWHFIXED&job=FULL$status=FAILED&operativePartition=<timestamp e.g.:20220518>'\n```\n- Get all the available fields [here](https://metis.ghi.com/obss/bigdata/common-dev/apps/monitoring/monitoring-devops/-/wikis/API-Functional-Spec#fields)\n### Grafana dashboard\nA Grafana dashboard provides visual monitoring for DWHFixed executions and error trends. Use the link below to access it.\nGrafana: `https://unc1.bigdata.abc.gr:3000/d/DNM-sBo4z/dwhfixed-dashboard?orgId=1&from=now-2d&to=now`\n## Alerts (Mail)\nEmail alerts are triggered automatically in case of failure in any component \u2014 Oracle, Hive, Impala. The subject and body format is detailed below.\n**Subject**: `DWHFIXED - FULL: FAILED`  \n**Body**: \n- `${ORACLE_TABLE}: failed to perform Oracle query.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: to connect or execute impala-shell query.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: failed to fetch data through Sqoop.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: fetched no data through Sqoop.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: failed to execute beeline query.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: to connect or execute impala-shell query.\\nTime: ${datetime_now}`\n`${ORACLE_TABLE}`: Can be any of the tables from section `1.1. Oracle (source)`  \n`${datetime_now}`: Current datetime in `%Y-%m-%d %H:%M` format\nThe application sends an email in each case of the following failures (for each table):\n### Oracle failure\n- Sqoop eval failure.\n- Sqoop import failure.\n- Sqoop has fetched no data.\nHow to check Oracle:\n```bash\nssh <username>@un2\nsh -l intra\njsec_file=jceks://hdfs/ez/intra.Sqoop.Creds.jceks\nsqoop eval \\\n-Dhadoop.security.credential.provider.path=${jsec_file} \\\n--password-alias dm_sas_va.pass \\\n--connect jdbc:oracle:thin:@999.999.999.999:6644/DWHPRD \\\n--username dm_sas_va \\\n--query \"select * FROM SAS_VA_VIEW.V_DW_CONTROL_TABLE where 1=1\" ;\n```\nAlternative way of checking Oracle:\n```bash\nssh <username>@undt1\nsu -l intra\nexport ORACLE_HOME=/usr/lib/oracle/11.2/client64\nexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:${LD_LIBRARY_PATH}\nexport PATH=$ORACLE_HOME/bin:${PATH}\nexport SQLPATH=$ORACLE_HOME/lib:${SQLPATH}\nexport NLS_DATE_FORMAT='yyyy-mm-dd hh24:mi:ss'\nexport HISTSIZE=0\nsqlplus dm_sas_va/<Oracle-pass>@999.999.999.999:6644/DWHPRD\n```\n### Hive/Impala failure\n- Beeline load data inpath has failed.\n- Impala refresh has failed.\nHow to check Hive/Impala:\n- In the Hue UI mentioned above, click on editor -> Hive/Impala\n- Run the following query on each:`select * from dwhfixed.v_sria_subarea_dim_hist limit 3;`\n### Actions\n//TODO\n# Delta Load\nThe delta load flow runs every 2 hours and loads only new partitions by consulting the control table in Oracle before running the main pipeline.\n- **USER**: `dwhfixed`\n- **HUE WORKFLOW**: `DWHFixed - Delta Workflow`, \n- **COORDINATOR**: `DWHFixed - Delta Coordinator`\n- **HDFS path**: `/user/dwhfixed/delta`\n- **Runs**: `1:30,3:30,5:30,7:30,9:30,11:30,13:30,15:30,19:30,21:30,23:30 (UTC)`\n- **Config file**: `hdfs: /user/dwhfixed/dwhfixed.config`\n- **Tables config/list**: `hdfs: /user/dwhfixed/delta/tables_delta.config`\n- **Oracle user**: `dm_sas_va`\n- **Oracle pass**: `https://metis.ghi.com/obss/oss/sysadmin-group/support/-/blob/master/KnowledgeBase/abc/devpasswd.kdbx`. You need password to open this file and get the user's password.\nRuns every 2h, checks control table: `SAS_VA_VIEW.V_DW_CONTROL_TABLE` in order to evaluate if a new partition has been added to the source tables. After that, it runs data flow.\n## Oracle (source)\n- `SAS_VA_VIEW.V_SRIA_SERVICE_REQUESTS_FCT`\n- `SAS_VA_VIEW.V_ACS_MODEMS_ACTIVE_FCT`\n- `SAS_VA_VIEW.V_LL_DIM`\n- `SAS_VA_VIEW.V_SRIA_INTERACT_ACTIVITY_FCT`\n- `SAS_VA_VIEW.V_DW_CONTROL_TABLE`\n- `SAS_VA_VIEW.V_FAULT_NTT_NETWORK_ELEM_FCT`\n- `SAS_VA_VIEW.V_SRIA_SITE_DIM`\n- `SAS_VA_VIEW.V_SR_AFF_CUST_FCT`\n## Hive - Impala (target)\n- `dwhfixed.v_sria_service_requests_fct_hist`\n- `dwhfixed.v_acs_modems_active_fct_hist`\n- `dwhfixed.v_ll_dim_hist`\n- `dwhfixed.v_sria_interact_activity_fct_hist`\n- `dwhfixed.v_fault_ntt_network_elem_fct_hist`\n- `dwhfixed.v_sria_site_dim_hist`\n- `dwhfixed.v_sr_aff_cust_fct_hist`\n## Data Flow\n``` mermaid\n    graph TD\n        A1(<b>Oracle Table</b>)\n        A2(\"<b>HDFS</b> <br> /user/hive/warehouse/dwhfixed.db/landing_zone/{table_name}\")\n        A3(<b>Hive table</b>)\n        A4(\"<b>Impala table</b>\")\n\n        A1 --> |\"\"\"<b>sqoop: import</b> <br> \n                jdbc:oracle:thin:@999.999.999.999:6644/DWHPRD <br>\n                user: dm_sas_va <br>\n                password file jceks://hdfs/user/dwhfixed/dwhfixed <br>\n                password-alias: dm_sas_va.pass\"\"\"| A2\n        A2 --> |\"<b>beeline: load data inpath</b>  <br>\n                 un-vip.bigdata.abc.gr:10000/default\"| A3\n        A3 --> |\"<b>impala-shell: refresh</b> <br>\n                 un-vip.bigdata.abc.gr\"| A4\n```\n## Logs\nApplication logs can be found in each Workflow in Hue as user `dwhfixed`. Oozie Coordinator result can be seen into HUE (login as `dwhfixed` user) and go to `Jobs -> Workflows` and look for `DWHFixed - Delta Workflow`\n## Monitoring messages\n- All monitoring messages have the following constant values:\\\n  **application=DWHFIXED**\\\n  **job=DELTA**\n- All monitoring messages of the same execution have a **unique executionId**\n- Every component of one execution has a unique row that is updated between the following status values: RUNNING to SUCCESS or FAILED.\n```mermaid\n    graph TD\n        A1(\"component=MAIN_START_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n        A2(\"component=SQOOP_IMPORT_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n        A3(\"component=BEELINE_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n        A4(\"component=IMPALA_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n        A5(\"component=MAIN_END_`ORACLE_TABLE`, operativePartition=`par_dt`, status=SUCCESS/FAILED\", param0='ORACLE_TABLE')\n\n        A1 --> A2\n        A2 --> A3\n        A3 --> A4\n        A4 --> A5\n```\n- Check monitoring app for successful executions:  \nFrom `un2` with personal account:\n``` bash\ncurl --location --request GET 'http://un-vip.bigdata.abc.gr:12800/monitoring/api/jobstatus/find?application=DWHFIXED&job=DELTA$status=SUCCESS&operativePartition=<timestamp e.g.:20220518>'\n```\n- Check monitoring app for failed executions:  \nFrom `un2` with personal account:\n``` bash\ncurl --location --request GET 'http://un-vip.bigdata.abc.gr:12800/monitoring/api/jobstatus/find?application=DWHFIXED&job=DELTA$status=FAILED&operativePartition=<timestamp e.g.:20220518>'\n```\n- Get all the available fields [here](https://metis.ghi.com/obss/bigdata/common-dev/apps/monitoring/monitoring-devops/-/wikis/API-Functional-Spec#fields)\n### Grafana dashboard\nGrafana: `https://unc1.bigdata.abc.gr:3000/d/DNM-sBo4z/dwhfixed-dashboard?orgId=1&from=now-2d&to=now`\n## Alerts (Mail)\n**Subject**: `DWHFIXED - DELTA: FAILED`  \n**Body**: \n- `${ORACLE_TABLE}: failed to perform Oracle query.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: to connect or execute impala-shell query.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: failed to fetch data through Sqoop.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: fetched no data through Sqoop.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: failed to execute beeline query.\\nTime: ${datetime_now}`\n- `${ORACLE_TABLE}: to connect or execute impala-shell query.\\nTime: ${datetime_now}`\n`${ORACLE_TABLE}`: Can be any of the tables from section `1.1. Oracle (source)`  \n`${datetime_now}`: Current datetime in `%Y-%m-%d %H:%M` format\nThe application sends an email in each case of the following failures (for each table):\n### Oracle failure\n- Sqoop eval failure.\n- Sqoop import failure.\n- Sqoop has fetched no data.\nHow to check Oracle:\n```bash\nssh <username>@un2\nsh -l intra\njsec_file=jceks://hdfs/ez/intra.Sqoop.Creds.jceks\nsqoop eval \\\n-Dhadoop.security.credential.provider.path=${jsec_file} \\\n--password-alias dm_sas_va.pass \\\n--connect jdbc:oracle:thin:@999.999.999.999:6644/DWHPRD \\\n--username dm_sas_va \\\n--query \"select * FROM SAS_VA_VIEW.V_DW_CONTROL_TABLE where 1=1\" ;\n```\nAlternative way of checking Oracle:\n```bash\nssh <username>@undt1\nsu -l intra\nexport ORACLE_HOME=/usr/lib/oracle/11.2/client64\nexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:${LD_LIBRARY_PATH}\nexport PATH=$ORACLE_HOME/bin:${PATH}\nexport SQLPATH=$ORACLE_HOME/lib:${SQLPATH}\nexport NLS_DATE_FORMAT='yyyy-mm-dd hh24:mi:ss'\nexport HISTSIZE=0\nsqlplus dm_sas_va/<Oracle-pass>@999.999.999.999:6644/DWHPRD\n```\n### Hive/Impala failure\n- Beeline load data inpath has failed.\n- Impala refresh has failed.\nHow to check Hive/Impala:\n- In the Hue UI mentioned above, click on editor -> Hive/Impala\n- Run the following query on each:`select * from dwhfixed.v_sria_subarea_dim_hist limit 3;`\n### Actions\nIn case of any of alert, do nothing. The flow will try to re-run in 2 hours. If everything is OK, then it will load successfully the partitions. After 2-2:30 hours check the status of the next run. \nIf the error persists:\n- In case of infastructure error (ex. HDFS, Hive are down), do nothing.\n- In case of other error, contact BigData Developer team.\n# HDFS Log Files Retention \nA daily HDFS workflow archives execution logs for historical reference. Default retention is 9 days.\nArchiving of the log files produced in every run of the flow and store them in HDFS directory.  \nIt is useful for investigation in case of errors.  \nThe retention of the log files is configurable. Default value: 9 days  \n- **USER**: `dwhfixed`\n- **HUE WORKFLOW**: `DWHFixed - HDFS_Log_Retention_Workf`, \n- **COORDINATOR**: `DWHFixed - HDFS_Log_Retention_Coord`\n- **Runs**: `${coord:days(1)} 23:00 (Europe/Athens)`\n- **HDFS Retention path**: `/user/dwhfixed/HDFS_LOG_Retention`\n- **HDFS Log path**: `/user/dwhfixed/log`\n- **HDFS Log Files**: `DWHFIXED.*.Archive.tar.gz`\n# Useful Links\n[Home](https://metis.ghi.com/obss/bigdata/abc/alarm-archiving/dwhfixed/-/wikis/home)\n[Infrastructure](https://metis.ghi.com/obss/bigdata/abc/alarm-archiving/dwhfixed/-/wikis/Infrastructure)"
          },
          {
            "question": "How can I investigate and recover from a full `/var` partition on a Cloudera edge node like dr1edge01?",
            "answer": "To resolve a full `/var` issue:\n1. SSH to the node and check usage:\n```bash\ndf -h\nsudo du -sh /var/*\n```\n2. If `/var/lib/carbon` is large, delete DEV metrics:\n```bash\ncd /var/lib/carbon/whisper/translog-api/spark\nsudo rm -rf IBank_IngestStream_DEV_mno ...\n```\n3. Confirm free space again:\n```bash\ndf -h\n```\n4. Verify Cloudera Manager reports the node as healthy again.",
            "category": "Troubleshooting & Issue Resolution",
            "files": "IM2010302-SD2070794.md",
            "context": "---\ntitle: Host Bad Health Alert on dr1edge01 Due to Full /var Partition\ndescription: Cloudera Manager reported agent health issues for dr1edge01 due to a full /var partition; root cause was oversized Graphite metrics directories under /var/lib/carbon; resolved by deleting obsolete DEV directories.\ntags:\n  - mno\n  - bigstreamer\n  - cloudera\n  - agent status\n  - disk full\n  - graphite\n  - carbon\n  - /var/lib/carbon\n  - dr1edge01\n  - host health\n  - bad health\n  - sd2070794\n  - dr site\n  - metrics storage\nlast_updated: 2025-05-01\nauthor: ilpap\ncontext:\n  issue_id: SD2070794\n  system: mno BigStreamer DR Site\n  root_cause: Full disk on /var partition caused by accumulated Graphite metrics data under /var/lib/carbon\n  resolution_summary: Deleted obsolete DEV Graphite folders from /var/lib/carbon to free space; host returned to healthy status in Cloudera Manager\n  affected_node: dr1edge01\n  impacted_service: Cloudera Agent Health\n---\n# mno - BigStreamer - SD2070794 - Alert at Cloudera Manager on DR\n## Description\nService affected: Hosts\nBad Health issue for dr1edge01.mno.gr (Agent Status)\n## Actions Taken\n1. Logged in to Cloudera Manager `https://dr1edge01.mno.gr:7183` with personal account in order to check the status of the host \"dr1edge01.mno.gr\".\n2. Checked `https://dr1edge01.mno.gr:7183/cmf/hardware/hosts` the host.\n3. Continued in Cloudera Manager on host \"dr1edge01.mno.gr\" and checked the disks.\n4. Logged in to \"dr1edge01.mno.gr\" node with personal account.\n5. Executed the following command and disk usage check performed on the nodes.\n```bash\ndf -h\n```\n6. We saw that the usage in \"/var\" partition was 100%.\n7. We proceed to find wich directory has big enough size.\n```bash\nsudo du -sh /var/*\n```\nAs we noticed \"/var/lib/carbon\" directory was enormous, up to 199 G. This directory concerns **Graphite** application. <br/>\n8. We navigated to /var/lib/carbon/whisper/translog-api/spark\n```bash\ncd /var/lib/carbon/whisper/translog-api/spark\n```\nIn this directory we can delete without any confirmation all the \"DEV\" directories.\n```bash\n-bash-4.2$ sudo rm -rf IBank_IngestStream_DEV_mno IBank_MergeBatch_DEV_mno IBank_MergeBatch_DEV_mno_Hourly Online_IngestStream_DEV_mno Online_MergeBatch_DEV_mno Online_MergeBatch_DEV_mno_Hourly\n```\n9. Disk usage has been checked again as step [5](#step-5).\n10. Cloudera Manager has been checked to validate that the bad status host alert has been eliminated as step [1](#step-1).\n## Root Cause\nThe `/var` partition on dr1edge01 was full due to accumulated Graphite metrics data from DEV topologies under `/var/lib/carbon/whisper/translog-api/spark`, causing agent heartbeat failures."
          },
          {
            "question": "What are the steps to upgrade Oracle Java 1.8 on edge nodes and ensure rollback capability?",
            "answer": "1. On each edge node, backup current Java:\n```bash\ncp -rap /usr/java/jdk1.8.0_<ver> /usr/java/jdk1.8.0_<ver>.bak\n```\n2. Configure repo and install update:\n```bash\nyum clean all\nyum update java-1.8\n```\n3. Use `update-alternatives` to switch versions:\n```bash\nupdate-alternatives --config java\n```",
            "category": "Infrastructure & Deployment",
            "files": "java_upgrade.md",
            "context": "---\ntitle: Oracle Java 1.8 Minor Upgrade on Edge Nodes\ndescription: Procedure for upgrading Oracle Java 1.8 to a newer minor version on BigStreamer edge nodes, including local RPM repository setup, edge node preparation, execution, certificate handling, update-alternatives configuration, and rollback instructions.\ntags:\n  - java\n  - oracle-java\n  - upgrade\n  - edge-nodes\n  - yum\n  - rpm\n  - certificates\n  - update-alternatives\n  - rollback\n  - cloudera\nlast_updated: 2025-05-01\nauthor: ilpap\ncontext:\n  environment: BigStreamer\n  systems:\n    - pr1edge01\n    - pr1edge02\n    - dr1edge01\n    - dr1edge02\n    - pr1node01\n  tools:\n    - Oracle Java 8\n    - YUM\n    - update-alternatives\n    - Wildfly\n    - jssecacerts\n  repositories:\n    - /var/www/html/oracle_java/Packages\n---\n# Oracle Java 1.8 Upgrade Procedure on Edge Nodes\nThis document describes the controlled upgrade of Oracle Java 1.8 minor versions on BigStreamer edge nodes. It covers the creation and maintenance of a local RPM repository on pr1node01, edge node backup and update procedures, handling of security certificates, switching Java versions using update-alternatives, and guidance for validating application behavior post-upgrade. Rollback steps are also provided.\nThis document outlines the upgrade process of minor java version for Oracle Java 1.8\non mno's edge nodes. All procedures pertain to PR and DR edge nodes, except the RPM repository\ncreation which is performed on pr1node1:\n- pr1edge01\n- pr1edge02\n- dr1edge01\n- dr1edge02\n## Step 1: Create Local RPM Repository\nThis step only needs to be performed once as all subsequent RPM's will be placed inside this\nrepository. SSH into **p1node01** and as root create the repository directories:\n```bash\n$ ssh Exxxx@pr1node01\n$ sudo -i\n# mkdir -p /var/www/html/oracle_java/Packages\n```\nDownload the desired RPMs from [Oracle Java SE Archive Downloads](https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html), place them inside\n`/var/www/html/oracle_java/Packages` and create the repository:\n```bash\n# cd /var/www/html/oracle_java\n# createrepo .\n```\nSSH into one of the edge nodes, create the corresponding yum repo file and **scp** it into\nall other edge nodes:\n```bash\n$ ssh Exxx@pr1edge01\n$ sudo -i\n# vi /etc/yum.repos.d/oracle_java.repo\n[oracle_java]\nname = oracle_java\nbaseurl =  http://p1node01.mno.gr/oracle_java\nenabled = 1\ngpgcheck = 0\n# scp /etc/yum.repos.d/oracle_java.repo XXXedgeXX:/etc/yum.repos.d/\n```\nFinally on each edge node install the above packages:\n```bash\n# yum clean all\n# yum install jdk-1.8\n```\n## Step 2: Update the Repository with New RPMs\nDownload the desired version of Oracle Java 8 from\n[Oracle Java SE Archive Downloads](https://www.oracle.com/java/technologies/javase/javase8u211-later-archive-downloads.html) or\n[Oracle Java SE Downloads](https://www.oracle.com/java/technologies/downloads/) and\nplace the RPMs inside `/var/www/html/oracle_java/Packages` of **pr1node01**. Login to\n**pr1node01** and update the repository with the new packages:\n```bash\n$ ssh Exxxx@pr1node01\n$ sudo -i\n# cd /var/www/html/oracle_java\n# createrepo --update .\n```\n## Step 3: Upgrade Java on Edge Hosts\n### Preparation\nBefore upgrading the edge nodes, their resources must be moved to other nodes and a backup\nof the old java be made. Login to each edge node:\n```bash\n$ ssh Exxxx@XXXedgeXX\n$ sudo -i\n# cp -rap /usr/java/jdk1.8.0_<old version>-amd64/  /usr/java/jdk1.8.0_<old version>-amd64.bak/\n```\nAnd follow the procedures described in the **Switchover of Cluster Resources** chapter\nof the **Security Vulnerabilities** MOP [here](https://metis.ghi.com/obss/oss/sysadmin-group/mno/cloudera-cluster/-/blob/master/Documentation/MOP/21324_security_vulnerabilities_v3.docx).\n### Execution\nInside each edge node, update the java package using **YUM**:\n```bash\n# yum clean all\n# yum update java-1.8\n```\nCopy the old certificates into the new installation directory and run the update alternatives\ntool where you input the new version when prompted:\n```bash\n# cp -ap /usr/java/jdk1.8.0_<old version>-amd64.bak/jre/lib/security/jssecacerts \\\n/usr/java/jdk1.8.0_<new version>-amd64/jre/lib/security/\n# update alternatives --config java * javac\n# java -version\n```\nIf everything is OK unstandby the node and check each wildfly instance's access and\nserver logs for the following:\n- `/var/log/wildfly/*/server.log`: There are no undeployed WARs\n- `/var/log/wildfly/*/access.log`: Everything is reporting HTTP 200 status\nDetailed wildfly information and management instructions can be found\n[here](https://metis.ghi.com/obss/oss/sysadmin-group/support/-/blob/master/KnowledgeBase/mno/BigStreamer/supportDocuments/procedures/manage_wildfly.md).\n## Step 4: Rollback to Previous Java Version\nLogin to each edge node and downgrade using the update-alternatives and inputting the previous version:\n```bash\n$ ssh Exxxx@XXXedgeXX\n$ sudo -i\n# update alternatives --config java * javac\n# java -version\n```"
          },
          {
            "question": "How can I verify data consistency between MSSQL and Impala tables during the Internet Banking migration?",
            "answer": "1. Count rows in MSSQL:\n```bash\nsqoop-eval --connect 'jdbc:jtds:sqlserver://...;databaseName=InternetBankingAudit' --query \"SELECT COUNT(*) FROM ServiceAudit ...\"\n```\n2. Count in raw Impala table:\n```bash\nimpala-shell -k --ssl -q \"SELECT COUNT(*) FROM prod_trlog_ibank.historical_service_audit_raw_v2;\"\n```\n3. If counts differ, re-run the import or use Hive to double-check.",
            "category": "Troubleshooting & Issue Resolution",
            "files": "ibank.md",
            "context": "---\ntitle: Internet Banking - Data Ingestion and Processing\ndescription: Complete documentation of the Internet Banking data pipeline: streaming ingestion, batch migration, Spark processing, Kafka, Wildfly, retention policies, Oozie jobs, and operational troubleshooting across DR/PR clusters.\ntags:\n  - ibank\n  - internet banking\n  - spark streaming\n  - kafka\n  - kudu\n  - hbase\n  - wildfly\n  - retention\n  - migration\n  - sqoop\n  - batch processing\n  - cron jobs\n  - troubleshooting\n  - monitoring\n  - cloudera manager\n  - impala\n  - data pipeline\n  - RAG\n  - BigStreamer\n---\n# Internet Banking\n## Stream\nProcesses user transaction events in real-time from Wildfly servers to Kafka, then through Spark Streaming to Kudu and HBase for persistent storage.\n### Wilfly Transaction Receiver\nWildfly applications receive HTTP POST requests with transaction events from Internet Banking backend servers and forward them to Kafka topics.\nUser generated events are sent to Wildfly instances installed at edge servers as HTTP POST requests. The requests originate from the backend servers of Internet Banking. Requests are loadbalanced by NetScaler (Loadbalancer) that is managed by mno's networking department. The events are then sent to a Kafka topic. Usually only one site is active (Primary Site).\n```mermaid\n  graph TD\n  A[Internet Banking Backend Servers] -->|HTTP Requests| B[Load Balancer - Netscaler]\n  B -->|Active| C[pr1edge01.mno.gr]\n  B -->|Active| D[pr1edge02.mno.gr]\n  B -.->|Stopped| E[dr1edge01.mno.gr]\n  B -.->|Stopped| F[dr1edge02.mno.gr]\n  C -->|Kafka Producer| G[Primary Site's Kafka: prod-trlog-ibank-ingest-stream-mir]\n  D -->|Kafka Producer| G\n  E -.->|Stopped| H[Disaster Site's Kafka: prod-trlog-ibank-ingest-stream-mir]\n  F -.->|Stopped| H\n```\n**User**: `PRODREST`\n**Installation Path**: `/opt/wildfly/default/prodrestib`\n**Deployments Path**: `/opt/wildfly/default/prodrestib/standalone/deployments`\n**General Configuration Path**: `/opt/wildfly/default/prodrestib/standalone/configuration/standalone.xml`\n**Application Configuration Path**: `/opt/wildfly/default/prodrestib/standalone/configuration/BigStreamer/beanconfig/translogApiIBankJmxConfig.xml`\n**Application Logs**: `/var/log/wildfly/prodrestib/server.log`\n**Access Log**: `/var/log/wildfly/prodrestib/access.log`\n**Instructions for start/stop**: [Here](../procedures/manage_wildfly.md)\n**Instructions for migrating traffic to DR site**: [Here](../procedures/failover.md)\n**Alerts**:\n- [PR][IBANK] REST Endpoints Average Response Time\n- [DR][IBANK] REST Endpoints Average Response Time\n- [PR][IBANK] Ingestion Average Error rate\n- [DR][IBANK] Ingestion Average Error rate\n**Troubleshooting Steps**:\n- Check application logs for error messages.\n- In case there are many errors in the application logs, try to restart the problematic Wildfly instance with the provided instructions.\n- If the logs do not indicate a specific problem, check for any problems regarding Kafka performance.\n### Kafka Topic Mirroring via MirrorMaker\nDescribes the Kafka MirrorMaker setup that replicates `-mir` topics from the active site to final shared topics used by both clusters.\nAfter being published to Kafka, the traffic is mirrored to the opposite site via Kafka MirrorMaker. In order to be able to have both Sites active at any given time and simplify the failover procedure the each Site produce messages to a topic with the suffix `-mir`. The topics with the `-mir` suffix contain events published to the Site. The `-mir` topics are then copied via Kafka MirrorMakers to the final topics (no `-mir` suffix), that has all the messages from both Sites.\n#### PR replication\n```mermaid\n  graph TD\n  A[pr1edge01.mno.gr] -->|Kafka Producer| C[PR Site Kafka: prod-trlog-ibank-ingest-stream-mir]\n  B[pr1edge02.mno.gr] -->|Kafka Producer| C\n  D[dr1edge01.mno.gr] -.->|Stopped| F[DR Site Kafka: prod-trlog-ibank-ingest-stream-mir]\n  E[dr1edge02.mno.gr] -.->|Stopped| F\n  C -->|Kafka MirrorMakers <br> pr1node01.mno.gr/pr1node04.mno.gr| G[PR Site Kafka: prod-trlog-ibank-ingest-stream]\n  F -->|Kafka MirrorMakers <br> pr1node05.mno.gr/pr1node06.mno.gr| G[PR Site Kafka: prod-trlog-ibank-ingest-stream]\n\n```\n#### DR replication\n``` mermaid\n  graph TD\n  A[pr1edge01.mno.gr] -->|Kafka Producer| C[PR Site Kafka: prod-trlog-ibank-ingest-stream-mir]\n  B[pr1edge02.mno.gr] -->|Kafka Producer| C\n  D[dr1edge01.mno.gr] -.->|Stopped| F[DR Site Kafka: prod-trlog-ibank-ingest-stream-mir]\n  E[dr1edge02.mno.gr] -.->|Stopped| F\n  F -->|Kafka MirrorMakers <br> dr1node01.mno.gr/dr1node04.mno.gr| H[DR Site Kafka: prod-trlog-ibank-ingest-stream]\n  C -->|Kafka MirrorMakers <br> dr1node05.mno.gr/dr1node06.mno.gr| H[DR Site Kafka: prod-trlog-ibank-ingest-stream]\n```\n**MirrorMaker User**: `kafka`\n**Configuration**: Cloudera Manager\n**Logs**: Cloudera Manager\n**Instructions for start/stop**: [Here](../procedures/manage_mirrormaker.md)\n**Alerts**:\n- Cloudera Manager alerts regarding Kafka\n### Spark Streaming Pipelines\nSpark topologies consume Kafka events and write them to Kudu and HBase, separating full stream and visible-only transactions.\nAfter being sent to the final Kafka topic, the records are consumed by two separate Spark Streaming topologies\n#### Prod_IBANK_IngestStream\nThis topology takes all records from the final Kafka topics, extracts some values and writes them to a Kudu table. It also inserts some columns that are too big for Kudu to an HBase table. This topology runs independently **on both clusters**.\n``` mermaid\n  graph TD\n  A[Kafka: prod-trlog-ibank-ingest-stream] --> B[Spark: Prod_IBANK_IngestStream]\n  B --> C[Kudu: prod_trlog_ibank.service_audit_stream]\n  B --> D[HBase: PROD_IBANK:SERVICE_AUDIT_STREAM]\n```\n**User**: `PRODREST`\n**Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Submit Script**: `/opt/ingestion/PRODREST/ibank/spark/submit/submitmnoSparkTopology_stream_cluster_mno_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- [PR][IBANK] Spark Waiting Batches\n- [DR][IBANK] Spark Waiting Batches\n**Troubleshooting Steps**:\n- If the alert chart has **no line**, ensure that the application is not running (Cloudera Manager > YARN > Applications) and then submit the topology using the **Submit Script**. After resubmitting the application check the old application logs for the root cause that it failed\n- If the alert has exceeded the threshold, investigate HBase/Kudu for delays and check the application logs for any errors. You can also try to kill (use Cloudera Manager or yarn command) and then re-submit the topology.\n#### Prod_IBANK_IngestStream_Visible\n**Visible transaction**: Visible are considered transactions from applications that have show_customer marked as true in the Impala table `prod_trlog_ibank.service_name`.\nThis topology takes **visible** records from the final Kafka topics and writes them to HBase tables. This topology runs independently **on both clusters**.\n``` mermaid\n  graph TD\n  A[Kafka: prod-trlog-ibank-ingest-stream] --> C[Spark: Prod_IBANK_IngestStream_Visible]\n  B[Impala: prod_trlog_ibank.service_name] -->|Queried every 6 hours| C[Spark: Prod_IBANK_IngestStream_Visible]\n  C --> D[HBase: PROD_IBANK:SERVICE_AUDIT]\n  C --> E[HBase: PROD_IBANK:SERVICE_AUDIT_IDX_CLUN_APP]\n  C --> F[HBase: PROD_IBANK:SERVICE_AUDIT_IDX_ID]\n  C --> G[HBase: PROD_IBANK:SERVICE_AUDIT_IDX_CLUN_SNTRNCAT]\n  C --> H[HBase: PROD_IBANK:SERVICE_AUDIT_OBSCURE]\n```\n**User**: `PRODREST`\n**Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Submit Script**: `/opt/ingestion/PRODREST/ibank/spark/submit/submitmnoSparkTopology_stream_cluster_mno_VISIBLE_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- [PR][IBANK Visible] Spark Waiting Batches\n- [DR][IBANK Visible] Spark Waiting Batches\n**Troubleshooting Steps**:\n- If the alert chart has **no line**, ensure that the application is not running (Cloudera Manager > YARN > Applications) and then submit the topology using the **Submit Script**.\n- If the alert has exceeded the threshold, investigate HBase for delays and check the application logs for any errors. You can also try to kill (use Cloudera Manager or yarn command) and then re-submit the topology.\n## Batch\nDescribes the daily and hourly batch flows that process and enrich ingested data, merge and de-duplicate them, and make them available to external systems.\n### Main Batch Job Entry Point\nMain batch entry point that coordinates migration, merge, enrichment, and final insertions to operational tables.\nAs mentioned before, the information processed by the [Prod_IBANK_IngestStream](#prod_ibank_ingeststream) topology is stored in Kudu/HBase tables. At the end of each day (at **1:00 am in PR site** and **2:00 am in DR site** by **Cron**) the records from HBase/Kudu is enriched with additional information and the transfered to a parquet table. After the data are inserted to the parquet table, sequent jobs are triggered to produce aggregations and data for external systems. This procedure runs **independantly on both sites**.\n**User**: `PRODREST`\n**Logs**: `/var/log/ingestion/PRODREST/ibank/log/ibank_histMigrate_aggr_MergeBatchWithLock_v2.log`\n**Script**: `/opt/ingestion/PRODREST/historical/ibank_histMigrate_aggr_MergeBatchWithLock_STABLE_v2.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- _See below_\n**Troubleshooting Steps**:\nThis procedure runs multiple steps which we will describe below with seperate troubleshooting steps for each step. Use the following steps for all alarms as a general guide:\n- Identify the failed step using the alarm name\n- Identify the root cause for the failed job based on the logs of the submit script/cluster application/query\n- If the problem is with an external system, ask the customer to inform the owners of the external system\n- if the problem is temporary or if you cannot determine the root cause of the problem, try to re-run the failed application\n### Sub-steps\nThe following steps run **on both clusters independently**, unless specified otherwise.\n#### MSSQL Sqoop Import (Migration)\nThis step transfers transactions from the legacy MSSQL server, which is managed by mno, to the cluster as part of the daily data migration from the legacy system.\n``` mermaid\n  graph TD\n  A[MSSQL] -->|Sqoop Import| B[Impala: prod_trlog_ibank.historical_service_audit_raw_v2]\n  B -->|Impala Insert| C[Impala: prod_trlog_ibank.historical_service_audit_v1]\n```\n**User**: `PRODREST`\n**Script Logs**: ```/opt/icomdev/ibank_hist/prod_migrate/sqoop_`date +%Y%m%d`_1_1_`date +%Y%m%d_%H%M`.log```\n**Sqoop Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Script**: `/opt/ingestion/PRODREST/historical/ibank_migration/sqoop_import_ibank_hist_recursive_prod_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- IBank_Migration Historical JOB\n- IBank_Migration Historical Sqoop_Import\n- IBank_Migration Historical Impala_Insert\n**Troubleshooting Steps**:\n- Use the script/sqoop logs to identify the cause of the failure\n- If the alert is Sqoop_Import, you can safely execute the script again\n  - For the previous day:\n    ``` bash\n    /opt/ingestion/PRODREST/historical/ibank_migration/sqoop_import_ibank_hist_recursive_prod_STABLE.sh /mno_data/hive/warehouse/prod_trlog_ibank.db/landing_zone/import_historical_service_audit_raw_v2 FandFUser prod_trlog_ibank.historical_service_audit_raw_v2 prod_trlog_ibank.historical_service_audit_v1 `date +%Y-%m-%d` 1 1 4 jceks://hdfs/user/PRODREST/migration/credentials/mssql_ibank.jceks mssqlprod.password >>  /opt/icomdev/ibank_hist/prod_migrate/sqoop_`date +%Y%m%d`_1_1_`date +%Y%m%d_%H%M`.log 2>&1\n    ```\n  - For a specified date:\n    ``` bash\n    # eg. 10-11-2019\n    nohup /opt/ingestion/PRODREST/historical/ibank_migration/sqoop_import_ibank_hist_recursive_prod_STABLE.sh /mno_data/hive/warehouse/prod_trlog_ibank.db/landing_zone/import_historical_service_audit_raw_v2 FandFUser prod_trlog_ibank.historical_service_audit_raw_v2 prod_trlog_ibank.historical_service_audit_v1 2019-11-10 1 1 4 jceks://hdfs/user/PRODREST/migration/credentials/mssql_ibank.jceks mssqlprod.password &>>  /opt/icomdev/ibank_hist/prod_migrate/sqoop_20191110_1_1_20191112_0900.log &\n    ```\n- If the alert is Impala_Insert, check the that the records from the MSSQL server and the `prod_trlog_ibank.historical_service_audit_raw_v2` have the same count\n  - MSSQL server\n    ``` bash\n    # Replace the sample date 16/11/2019-17/11/2019\n\tsource /opt/ingestion/PRODREST/historical/ibank_migration/config\n    sqoop-eval  -Dhadoop.security.credential.provider.path=jceks://hdfs/user/PRODREST/migration/credentials/mssql_ibank.jceks --connect 'jdbc:jtds:sqlserver://999.999.999.999:2544;useNTLMv2=true;databaseName=InternetBankingAudit' --username FandFUser --password-alias mssqlprod.password --query \"select count() from ServiceAudit WITH (nolock, INDEX(IX_ServiceAuditNew_Timestamp)) where Timestamp >= '2019-11-16 00:00:00' and Timestamp < '2019-11-17 00:00:00'\"\n    ```\n  - prod_trlog_ibank.historical_service_audit_raw_v2\n    ``` bash\n    impala-shell -k --ssl -i ${HOSTNAME/01/} -q \"select  count(*) from prod_trlog_ibank.historical_service_audit_raw_v2;\"\n    ```\n- In case the counts are different between the two try again with Hive:\n  - prod_trlog_ibank.historical_service_audit_raw_v2\n    ``` bash\n    # For Primary Site\n    beeline -u \"jdbc:hive://pr1edge.mno.gr:10000/default;principal=hive/_HOST@BDAP.mno.GR;ssl=true\" -e \"select  count(*) from prod_trlog_ibank.historical_service_audit_raw_v2;\"\n    # For Disaster Site\n    beeline -u \"jdbc:hive://dr1edge.mno.gr:10000/default;principal=hive/_HOST@BDAD.mno.GR;ssl=true\" -e \"select  count(*) from prod_trlog_ibank.historical_service_audit_raw_v2;\"\n    ```\n- If the counts are the same with Hive:\n  ``` bash\n  # For Primary Site\n  beeline -u \"jdbc:hive://pr1edge.mno.gr:10000/default;principal=hive/_HOST@BDAP.mno.GR;ssl=true\"\n  # For Disaster Site\n  beeline -u \"jdbc:hive://dr1edge.mno.gr:10000/default;principal=hive/_HOST@BDAD.mno.GR;ssl=true\"\n  ```\n  And run the insert:\n  ``` SQL\n  INSERT INTO prod_trlog_ibank.historical_service_audit_v1 partition (par_dt) SELECT id, to_timestamp(trtimestamp, 'yyyy-MM-dd HH:mm:ss.SSSSSSS'), trim(host), trim(servicename), trim(type), trim(application), cast(substr(executiontime,1,2)as BIGINT)36001000000000 + castsubstr(executiontime,4,2)as BIGINT)601000000000+ cast(substr(executiontime,7,2)as BIGINT)*1000000000 + cast(substr(executiontime,10,7)as BIGINT)*100, clientsession, trim(clientusername), cast(clientcustomer AS bigint), clientipadress, clientdetails, trim(clientrequestpath), cast(clientlongitude AS FLOAT), cast(clientlatitude AS FLOAT), cast(substr(clientexecutiontime,1,2)as BIGINT)36001000000000 + cast(substr(clientexecutiontime,4,2)as BIGINT)601000000000+ cast(substr(clientexecutiontime,7,2)as BIGINT)*1000000000 + cast(substr(clientexecutiontime,10,7)as BIGINT)*100, webhost, responsetextdata, requesttextdata, errordata, replace(to_date(trtimestamp),'-','') AS par_dt FROM prod_trlog_ibank.historical_service_audit_raw_v2;\n  ```\n  And then refresh the table\n  ``` bash\n  impala-shell -k --ssl -i ${HOSTNAME/01/} -q \"SET DDL_SYNC=true; refresh prod_trlog_ibank.historical_service_audit_v1;\"\n  ```\n- Run the rest of the steps\n#### Insert to Service Audit\nThis step transfers transactions migrated from the legacy MSSQL server to the final table.\n``` mermaid\n  graph TD\n  A[Impala: prod_trlog_ibank.historical_service_audit_v1] -->|Impala Insert| B[Impala: prod_trlog_ibank.service_audit]\n  ```\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/ibank_migrate_hist_to_service_audit.log`\n**Script**: `/opt/ingestion/PRODREST/historical/ibank_migrate_hist_to_service_audit_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- IBank_Migration Historical to SA JOB\n- IBank_Migration Historical to SA Impala_Insert\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- The script cleans up after failure, so if the problem was temporary run the script again\n  - For the previous day:\n    ``` bash\n    /opt/ingestion/PRODREST/historical/ibank_migrate_hist_to_service_audit_STABLE.sh prod_trlog_ibank.historical_service_audit_v1 prod_trlog_ibank.service_audit `date +%Y%m%d` 1 1 >> /var/log/ingestion/PRODREST/ibank/log/ibank_migrate_hist_to_service_audit.log  2>&1\n    ```\n  - For a specified date:\n    ``` bash\n    # eg. 09-11-2019 (Ndef that the argument is one day after the desired date)\n    /opt/ingestion/PRODREST/historical/ibank_migrate_hist_to_service_audit_STABLE.sh prod_trlog_ibank.historical_service_audit_v1 prod_trlog_ibank.service_audit 20191110 1 1 >> /var/log/ingestion/PRODREST/ibank/log/ibank_migrate_hist_to_service_audit.log  2>&1 &\n    ```\n- Run the rest of the steps\n#### Merge Batch\nThis step transfers transactions ingested by the [Stream](#stream) flow to an intermediate table and deletes the data from the original tables.\n``` mermaid\n  graph TD\n  A[Kudu: prod_trlog_ibank.service_audit_stream] --> B[Spark: PROD_IBank_MergeBatch]\n  C[HBase: PROD_IBANK:SERVICE_AUDIT_STREAM] --> B\n  B --> D[Impala: prod_trlog_ibank.service_audit_old]\n  ```\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/cronExecutor_ibankBatch_full.log`\n**Spark Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Script**: `/opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- IBank_Ingestion MergeBatch JOB\n**Troubleshooting Steps**:\n- Use the script/spark logs to identify the cause of the failure\n- Ensure that no records are present in prod_trlog_ibank.service_audit_old\n  ``` bash\n  # eg. 09-11-2019\n  impala-shell -k --ssl -i ${HOSTNAME/01/} -q \"select  count(*) from prod_trlog_ibank.service_audit_old where par_dt='20191109';\"\n  ```\n- If no records exist and no other process is up, you can ran the script again.\n  - For the previous day:\n    ``` bash\n    /opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh /user/PRODREST/lock/PROD_IBank_MergeBatch LOCK_IBANK_PROD_BATCH_MERGE_TRANS /opt/ingestion/PRODREST/ibank/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh PROD_IBank_MergeBatch  /opt/ingestion/PRODREST/ibank/lock/ FULL 1800 \"`date --date='-1 day' '+%Y-%m-%d 00:00:00'`\" \"`date '+%Y-%m-%d 00:00:00'`\"   >> /var/log/ingestion/PRODREST/ibank/log/cronExecutor_ibankBatch_full.log 2>&1\n    ```\n  - For a specified date:\n    ``` bash\n    # eg. 09-11-2019\n    /opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh /user/PRODREST/lock/PROD_IBank_MergeBatch LOCK_IBANK_PROD_BATCH_MERGE_TRANS /opt/ingestion/PRODREST/ibank/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh PROD_IBank_MergeBatch  /opt/ingestion/PRODREST/ibank/lock/ FULL 1800 \"2019-11-09 00:00:00\" \"2019-11-10 00:00:00\"   >> /var/log/ingestion/PRODREST/ibank/log/cronExecutor_ibankBatch_full.log 2>&1 &\n    ```\n- The process runs for well over an hour under normal circumstances or even longer for heavy load. Use of `screen` command advised\n- If the problem is with resources (out-of-memory errors):\n  - You can adjust the values at `/opt/ingestion/PRODREST/ibank/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh`. At the moment these values are as high as they can go.\n  - You can run the MergeBatch for parts of the day\n    ``` bash\n    # eg. 09-11-2019\n    /opt/ingestion/PRODREST/ibank/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 00:00:00\" \"2019-11-09 12:00:00\"\n    /opt/ingestion/PRODREST/ibank/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 12:00:00\" \"2019-11-09 18:00:00\"\n    /opt/ingestion/PRODREST/ibank/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 18:00:00\" \"2019-11-10 00:00:00\"\n    ```\n- Run the rest of the steps\n#### Distinct join to Service Audit\nSome records that are ingested by the [Stream](#stream) can also be present in the MSSQL server. In this step we insert to the final table the transactions that are unique to the [Stream](#stream), excluding the ones that are already present in the final table due to the data migration by MSSQL.\n``` mermaid\n  graph TD\n  A[Impala: prod_trlog_ibank.service_audit_old] -->|Impala Insert| B[Impala: prod_trlog_ibank.service_audit]\n```\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/ibank_service_audit_insert_join_distinct.log`\n**Script**: `/opt/ingestion/PRODREST/historical/ibank_service_audit_insert_join_distinct.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- IBank_Migration Enrich SA from SA_old JOB\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- Ensure that only records coming from prod_trlog_ibank.historical_service_audit_v1 are present in prod_trlog_ibank.service_audit. These records come from Insert to Service Audit [sub-step](#insert-to-service-audit) and their number should match.\n  ``` bash\n  # eg. 09-11-2019\n  impala-shell -k --ssl -i ${HOSTNAME/01/} -q \"select  count(*) from prod_trlog_ibank.service_audit where par_dt='20191109';\"\n  impala-shell -k --ssl -i ${HOSTNAME/01/} -q \"select  count(*) from prod_trlog_ibank.historical_service_audit_v1 where par_dt like '20191109';\"\n  ```\n- If these records match and no other process is up, you can run the script again.\n  - For the previous day:\n    ``` bash\n    /opt/ingestion/PRODREST/historical/ibank_service_audit_insert_join_distinct.sh `date -d '-1 day' '+%Y%m%d'` >> /var/log/ingestion/PRODREST/ibank/log/ibank_service_audit_insert_join_distinct.log 2>&1\n    ```\n  - For a specified date:\n    ``` bash\n    # e.g. 09-11-2019\n    /opt/ingestion/PRODREST/historical/ibank_service_audit_insert_join_distinct.sh 20191109 >> /var/log/ingestion/PRODREST/ibank/log/ibank_service_audit_insert_join_distinct.log 2>&1\n    ```\n- Run the rest of the steps\n#### Report stats to Graphite\nReports statistics about the ingestion process.\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/cron_report_stats.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/report_stats_impala_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- This process is not monitored\n- You can safely skip this step\n- Sample execution:\n  ``` bash\n  nohup  /opt/ingestion/PRODREST/common/scripts/report_stats_impala_STABLE.sh prod_trlog_ibank.service_audit ibank >> /var/log/ingestion/PRODREST/ibank/log/cron_report_stats.log\n  ```\n- Run the rest of the steps\n#### Trigger external flows\nNdef: **ONLY DR SITE**\nCreates a trigger file for external flows. Related to [Datawerehouse](./ibank_dwh.md)\n**User**: `PRODREST`\n**Script Logs**: `-`\n**Script**: `-`\n**Alerts**:\n- IBank_Migration Create UC4 file Create UC4 file\n**Troubleshooting Steps**:\n- Ensure that you are running steps for the DR site\n- If you are running the steps for the Primary skip this step\n- Execution:\n  ``` bash\n  touch /home/bank_central_mno_gr/datawarehouse_status/IBANK_SA_`date '+%Y%m%d'`.READY\n  touch /opt/applications/landing_zone/PRODUSER/triggers/IBANK_SA_`date '+%Y%m%d'`.READY\n  ```\n- Run the rest of the steps\n#### Drop Hourly Batch Partitions (DR Site)\nNdef: **ONLY DR SITE**\nDrop partitions from the [Hourly Merge Batch](#hourly-merge-batch) tables\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/drop_hourly_partitions.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh`\n**Alerts**:\n- IBank_Migration Drop hourly partitions JOB\n**Troubleshooting Steps**:\n- Ensure that you are running steps for the DR site\n- If you are running the steps for the Primary skip this step\n- Use the script logs to identify the cause of the failure\n- For the previous day:\n  ``` bash\n  nohup /opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh \"prod_trlog_ibank.service_audit_hourly\" \"`date -d '-1 day' '+%Y%m%d'`\" >> /var/log/ingestion/PRODREST/ibank/log/drop_hourly_partitions.log 2>&1 &\n  ```\n- For a specified date:\n  ``` bash\n  # e.g. 09-11-2019\n  nohup /opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh \"prod_trlog_ibank.service_audit_hourly\" \"20191109\" >> /var/log/ingestion/PRODREST/ibank/log/drop_hourly_partitions.log 2>&1 &\n  ```\n- Run the rest of the steps\n#### Execute aggregations\nNdef: **This flow is supspended. DO NOT EXECUTE**. Information listed here are for completeness.\nThis flow computes aggregations for use with the [Queries](#queries).\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/update_ibank_aggr_tables.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/update_ibank_aggr_tables_STABLE.sh`\n**Alerts**:\n- IBank_Migration Aggregations JOB\n- IBank_Migration Aggregations HBase\n- IBank_Migration Aggregations Kudu\n**Troubleshooting Steps**:\n- **DO NOT RUN THIS STEP**\n- For the previous day:\n  ``` bash\n  /opt/ingestion/PRODREST/common/scripts/update_ibank_aggr_tables_STABLE.sh prod_trlog_ibank.service_audit prod_trlog_ibank.aggr_service_audit_clun_app prod_trlog_ibank.aggr_service_audit_clun >> /var/log/ingestion/PRODREST/ibank/log/update_ibank_aggr_tables.log 2>&1\n  ```\n- For a specified date:\n  ``` bash\n  # e.g. 09-11-2019\n  /opt/ingestion/PRODREST/common/scripts/update_ibank_aggr_tables_STABLE.sh prod_trlog_ibank.service_audit prod_trlog_ibank.aggr_service_audit_clun_app prod_trlog_ibank.aggr_service_audit_clun 20191109 >> /var/log/ingestion/PRODREST/ibank/log/update_ibank_aggr_tables.log 2>&1\n  ```\n- Run the rest of the steps\n#### Upsert to HBase (Migration)\nThis step enriches the HBase visible tables with the transactions that are unique to MSSQL server.\n``` mermaid\n  graph TD\n  A[Impala: prod_trlog_ibank.service_audit] --> C[Impala Insert/Spark]\n  B[Impala: prod_trlog_ibank.service_audit_old] --> C\n  C --> D[HBase: PROD_IBANK:SERVICE_AUDIT]\n  C --> E[HBase: PROD_IBANK:SERVICE_AUDIT_IDX_CLUN_APP]\n  C --> F[HBase: PROD_IBANK:SERVICE_AUDIT_IDX_ID]\n  C --> G[HBase: PROD_IBANK:SERVICE_AUDIT_IDX_CLUN_SNTRNCAT]\n  C --> H[HBase: PROD_IBANK:SERVICE_AUDIT_OBSCURE]\n```\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/ibank_visible_trn_hbase_daily_upsert.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/ibank_visible_trn_hbase_daily_upsert_STABLE.sh`\n**Alerts**:\n- IBank_Migration Enrich hbase tables JOB\n- IBank_Migration Enrich hbase tables Impala_insert\n- IBank_Migration Enrich hbase tables Spark\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n  Ndef: If job failed and the following error appears :`ERROR: RetriesExhaustedWithDetailsException: Failed <num> actions: CallTimeoutException: <num> times, servers with issues: [dr/pr]1node02.mno.gr`,  execute script again. The error has to do with HBase merging/spliting on a region server, but a detailed reason is unknown.\n- The script uses upsert and can be safely run many times.\n  - For the previous day:\n    ``` bash\n    /opt/ingestion/PRODREST/common/scripts/ibank_visible_trn_hbase_daily_upsert_STABLE.sh `date -d '-1 day' '+%Y%m%d'`  >> /var/log/ingestion/PRODREST/ibank/log/ibank_visible_trn_hbase_daily_upsert.log 2>&1\n    ```\n  - For a specified date:\n    ``` bash\n    # e.g. 09-11-2019\n    /opt/ingestion/PRODREST/common/scripts/ibank_visible_trn_hbase_daily_upsert_STABLE.sh 20191109  >> /var/log/ingestion/PRODREST/ibank/log/ibank_visible_trn_hbase_daily_upsert.log 2>&1\n    ```\n- Run the rest of the steps\n#### Send reports to business users\nSends email reports to users for duplicate transaction IDS and leftover transactions in `prod_trlog_ibank.service_audit_stream`.\n**User**: `PRODREST`\n**Script Logs**: `-`\n**Script**: `-`\n**Alerts**:\n- IBank_Migration GUID_Report JOB\n- IBank_Migration GUID_Report Impala\n**Troubleshooting Steps**:\n- Check `/var/log/ingestion/PRODREST/ibank/log/ibank_report_duplicate_identical.log` for errors\n- You can safely skip this step if not running for the previous day\n- Sample execution:\n   ``` bash\n  /opt/ingestion/PRODREST/common/scripts/ibank_report_duplicate_identical_STABLE.sh  prod_trlog_ibank service_audit_old service_audit_duplicates >> /var/log/ingestion/PRODREST/ibank/log/ibank_report_duplicate_identical.log 2>&1 &\n   ```\n#### Duplicates between Impala and Kudu/HBase\nDelete data which exist both Impala and Kudu. Sometimes MergeBatch fails because YARN kills executors for exceeding memory limits. AS a result, transactions are inserted to impala and job fails before drop them from kudu and HBase\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/report_duplicates_kudu_hbase_impala.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/report_duplicates_kudu_hbase_impala_STABLE.sh`\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Check `/var/log/ingestion/PRODREST/ibank/log/report_duplicates_kudu_hbase_impala.log` for errors\n- You can safely skip this step if not running for the previous day\n- Sample execution:\n  ``` bash\n  /opt/ingestion/PRODREST/common/scripts/report_duplicates_kudu_hbase_impala_STABLE.sh `date --date='-1 day' '+%Y%m%d'` prod_trlog_ibank.service_audit_stream prod_trlog_ibank.service_audit_old ibank >> /var/log/ingestion/PRODREST/ibank/log/report_duplicates_kudu_hbase_impala.log 2>&1\n  ```\n- Run the rest of the steps\n#### Update monitoring postgres database\nNdef: **IF AND ONLY IF**  all steps performed succesfully and grafana monitoring isn't updated, proceed with the following:\nUpdated the monitoring postgres database to appeared green/success in Grafana.\n- For a specified date:\n```bash\n# e.g 2023-03-30\nssh Exxxx@pr1edge01.mno.gr\nsudo -i -u postgres\npsql -d monitoring\nselect * from prod.monitoring where par_dt = 20230330;\nINSERT INTO prod.monitoring (application, job_name,component,status,par_dt,start_time,end_time,description,params,host) VALUES ('IBank_Migration','Enrich SA from SA_old','JOB',0,20230330,'2023-03-31 03:18:30.000','2023-03-31 05:00:42.000','','','pr1edge01.mno.gr') ON CONFLICT (application, job_name,component,par_dt) DO UPDATE SET status=0, start_time='2023-03-31 03:18:30.000', end_time='2023-03-31 05:00:42.000',description='';\n```\n- Check from Grafana that the failed job is now succeded\n### Hourly Merge Batch\nEvery hour a  transfers transactions ingested by the [Stream](#stream) flow to an intermediate table and without deleting the data from the original tables. This table is used by mno to query the latest transactions.\n``` mermaid\n  graph TD\n  A[Kudu: prod_trlog_ibank.service_audit_stream] --> B[Spark: PROD_IBank_MergeBatch_Hourly]\n  C[HBase: PROD_IBANK:SERVICE_AUDIT_STREAM] --> B\n  B --> D[Impala: prod_trlog_ibank.service_audit_hourly]\n  ```\n**User**: `PRODREST`\n**Spark Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Use the spark logs to identify the cause of the failure\n- The data in the Hourly tables is only for the current day. No need to fill missing hours, as the next MergeBatch will insert the data to the final table.\n## Queries\nExplains how Internet Banking queries are handled using REST endpoints and backend access to Impala and HBase.\nThe ingested data are queried in order to be displayed by the Internet Banking application (under the Calendar/\u0397\u03bc\u03b5\u03c1\u03bf\u03bb\u03cc\u03b3\u03b9\u03bf application). The application displays to the user only **Visible** transactions. The queries are submitted to the cluster as HTTP requests using the same Wildfly instances as the [Stream](#stream) flow.\n```mermaid\n  graph TD\n  A[Internet Banking Backend Servers] -->|HTTP Requests| B[Load Balancer - Netscaler]\n  B -->|Active| C[pr1edge01.mno.gr]\n  B -->|Active| D[pr1edge02.mno.gr]\n  B -.->|Stopped| E[dr1edge01.mno.gr]\n  B -.->|Stopped| F[dr1edge02.mno.gr]\n  C -->|Impala JDBC / HBase client| G[Primary Site]\n  D -->|Impala JDBC / HBase client| G\n  E -.->|Stopped| H[Disaster Site]\n  F -.->|Stopped| H\n```\n**User**: `PRODREST`\n**Installation Path**: `/opt/wildfly/default/prodrestib`\n**Deployments Path**: `/opt/wildfly/default/prodrestib/standalone/deployments`\n**General Configuration Path**: `/opt/wildfly/default/prodrestib/standalone/configuration/standalone.xml`\n**Application Configuration Path**: `/opt/wildfly/default/prodrestib/standalone/configuration/BigStreamer/beanconfig/translogApiIBankJmxConfig.xml`\n**Application Logs**: `/var/log/wildfly/prodrestib/server.log`\n**Access Log**: `/var/log/wildfly/prodrestib/access.log`\n**Instructions for start/stop**: [Here](../procedures/manage_wildfly.md)\n**Instructions for migrating traffic to DR site**: [Here](../procedures/failover.md)\n**Alerts**:\n- [PR][IBANK] Query Average Response Time\n- [DR][IBANK] Query Average Response Time\n- [PR][IBANK] Query Average Error rate\n- [DR][IBANK] Query Average Error rate\n**Troubleshooting Steps**:\n- Check in Grafana dashboard `MONITORING/Monitoring Alerts` the charts that are in alerting state\n- If the response time is for _Old implementation_ (see below) queries check if the response time is constant, a single query can increase the mean value of the response time. Check the access log for entries with large response time for the specific endpoint. If it is an isolated query the customer is not impacted.\n- Check application logs for error messages.\n- In case there are many errors in the application logs, try to restart the problematic Wildfly instance with the provided instructions.\n- If the logs do not indicate a specific problem, check for any problems regarding Impala/Kudu/HBase.\n### Old implementation\nThere are two versions for each query. The old implementention queries Impala tables stored in both HDFS and Kudu/HBase. This implementation had performance problems for many concurrent users.\n**Endpoints**:\n- auditCount **NOT USED BY mno**\n- auditSearch **NOT USED BY mno**\n- selectById **USED BY mno**\n### New implementation\nThe new implementation uses a subset of the data (only visible transactions) stored in HBase. Queries required to access **non-Visible** transactions have to rely on the old implementation.\n**Endpoints**:\n- auditCountVisible **NOT USED BY mno**\n- auditSearchVisible **USED BY mno**\n- selectByIdVisible **NOT USED BY mno**\n## Retention Mechanism\nDescribes automated retention flows that drop old partitions from Impala, HDFS, and HBase to manage storage over time.\n### Impala Retention\nEvery day (at **3:00 pm in both sites** by **Cron**) This script drops partitions from impala tables `prod_trlog_ibank.service_audit_old` and `prod_trlog_ibank.historical_service_audit_v1` older than 10 days. It also removes a HDFS directory under `/mno_data/hive/warehouse/prod_trlog_ibank.db/landing_zone/import_historical_service_audit_raw_v2_vault/` that correspond to 30 days before.\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/common/log/retention_mechanism_daily.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/retention_mechanism_daily_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr`\n**Alerts**:\n- Retention prod_trlog_ibank.service_audit_old JOB\n- Retention prod_trlog_ibank.historical_service_audit_v1 JOB\n- Retention /mno_data/hive/warehouse/prod_trlog_ibank.db/landing_zone/import_historical_service_audit_raw_v2_vault/`date -d \"-30 day\" +%Y-%m-%d`_`date -d \"-29 day\" +%Y-%m-%d` JOB\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- After the root cause for the failure is resolved, run manually the following commands\n  - For a specified date:\n    ``` bash\n    # eg. 09-11-2019\n    impala-shell -k -i ${HOSTNAME/01/} --ssl --query \"set SYNC_DDL=true;alter table prod_trlog_ibank.service_audit_old drop partition ( par_dt <= 20191109 ) purge;\"\n    impala-shell -k -i ${HOSTNAME/01/} --ssl --query \"set SYNC_DDL=true;alter table prod_trlog_ibank.historical_service_audit_v1 drop partition ( par_dt <= '20191109' ) purge;\"\n    hdfs dfs -rm -R -skipTrash /mno_data/hive/warehouse/prod_trlog_ibank.db/landing_zone/import_historical_service_audit_raw_v2_vault/2019-11-09_2019-11-10\n    ```\n#### Additional Tables\nKudu table's `prod_trlog_ibank.service_audit_stream` partitions are maintained by an Oozie jobs every day. See section [Create next week kudu partitions](#create-next-week-kudu-partitions).\n\nParquet table's `prod_trlog_ibank.service_audit_hourly` partitions are dropped after each successful Merge run. See section [Drop hourly partitions](#drop-hourly-partitions).\n#### DEV\nEvery day (at **16:05 on DR site only** by **Cron**). This script drops partitions from impala table `dev_trlog_ibank.service_audit` older than 60 days.\n**User**: `DEVREST`\n**Script Logs**: `/var/log/ingestion/DEVREST/common/log/retention_mechanism_daily.log`\n**Script**: `/opt/ingestion/DEVREST/common/scripts/retention_mechanism_daily_STABLE.sh`\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- After the root cause for the failure is resolved, run manually the following command\n  ``` bash  \n  /opt/ingestion/DEVREST/common/scripts/retention_mechanism_daily_STABLE.sh >> /var/log/ingestion/DEVREST/common/log/retention_mechanism_daily.log 2>&1\n  ```\n### HBase retention\nEvery day (at **16:00 in both sites** by **Cron**) This script deletes rows from hbase `PROD_IBANK:SERVICE_AUDIT_STREAM` which refere to transactions inserted 7 days ago. Those rows may have been not deleted properly after merge batch job. To do so the topology queries rows from impala table `prod_trlog_ibank.service_audit` inside partition with par_dt refering 7 days ago.\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/ibank/log/daily_tools_cleanupHBaseSAS.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/daily_tools_cleanupHBaseSAS.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr`\n**Alerts**:\n- Retention IbankCleanupHbaseSAS JOB\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- After the root cause for the failure is resolved, check on `/opt/ingestion/PRODREST/no_bkp/duplicate_cid_hbase` if a manual re-run must be done for a specific date\n  - For a specified date eg 2022-06-30:\n    ``` bash\n    /opt/ingestion/PRODREST/common/spark/submit/submitmnoSparkTopology_tools_cleanupHbaseSAS prod_trlog_ibank.service_audit PROD_IBANK:SERVICE_AUDIT_STREAM LIST 20220630\n    ```\n##  Oozie Jobs\nOozie workflows that import lookup tables and manage weekly Kudu partitioning.\n###  Lookup tables\nEvery day (at 07:15 by Oozie on DR & PR site ), we transfers 3 tables with reference data from the legacy MSSQL server, which is managed by mno, to the cluster. We keep only latest version to BigData (no partition).\n**User**: `PRODREST`\n**Coordinator**: `Coord_IbankLookupTables_PROD`\n**Workflow**: `ImportLookupTables`\n**Local path**: `/opt/ingestion/PRODREST/hdfs_mirror/lookupTables/import_lookup_tables.sh`\n**Logs**: from HUE\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Open Hue to find coordinator status and logs\n###  Create next week kudu partitions\nEvery day (at 10:00 by Oozie on DR site and 10:40 by Oozie on PR site ), we delete old Kudu partitions and add new Kudu partitions on `prod_trlog_ibank.service_audit_stream`.\n**User**: `PRODREST`\n**Coordinator**: `Coord_IBankCreateKuduPartitionsPROD`\n**Workflow**: `CreateKuduPartitionsPROD`\n**Local path**: `/opt/ingestion/PRODREST/hdfs_mirror/create_kudu_partition/create_next_weeks_partitions.sh`\n**Logs**: from HUE\n**Alerts**:\n- **Not Monitored**\n**Troubleshooting Steps**:\n- Open Hue to find coordinator status and logs\nThere is a case that merge batch has not properly run for a specific date, **even though** the transactions for that specific date are present on impala `service_audit`. For example by moving a service_audit partiton from DR to PR or vice versa, or when merge batch failed **after** deleting transactions from kudu.\nIn that case we can manually mark merge batch as complete for that date, and therefore next oozie job created by `Coord_IBankCreateKuduPartitionsPROD` will delete that partition from kudu, by manipulating HBase table `PROD_IBANK:MERGE_BATCH_STATE_INFO`.\nExample for a specific date (10/10/2022):\n - Run HBase shell\n ```\n   hbase shell\n   ```\n - And then inside HBase shell:\n ```\n   put 'PROD_IBANK:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_hbase', 'true'\n   put 'PROD_IBANK:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_hbase_time','0'\n   put 'PROD_IBANK:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_kudu', 'true'\n   put 'PROD_IBANK:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_kudu_time', '0'\n   put 'PROD_IBANK:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:running', 'false'\n   put 'PROD_IBANK:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:running+time', '0'\n   put 'PROD_IBANK:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:write_impala', 'true'\n   put 'PROD_IBANK:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:write_impala_time', '0'\n   ```\n#### DEV\nEvery day (at **11:10 by Oozie** on **DR site only** ), we delete old Kudu partitions and add new Kudu partitions on `dev_trlog_ibank.service_audit_stream`.\n**User**: `DEVREST`\n**Coordinator**: `Coord_IBankCreateKuduPartitionsDEV`\n**Workflow**: `CreateKuduPartitionsDEV`\n**Local path**: `/opt/ingestion/DEVREST/hdfs_mirror/create_kudu_partition/create_next_weeks_partitions.sh`\n**Logs**: from HUE\n**Alerts**:\n- Not Monitored"
          },
          {
            "question": "How is the monitoring application deployed and accessed within the BigStreamer infrastructure?",
            "answer": "The monitoring application is deployed on two nodes: un5.bigdata.abc.gr and un6.bigdata.abc.gr. It is accessed via HAProxy through the VIP host un-vip.bigdata.abc.gr on port 12800. It runs as a Docker container named `monitoring-app-{version}`.",
            "category": "Application Functionality & Flow",
            "files": "manage-monitoring-app.md",
            "context": "---\ntitle: Monitoring Application  \nsystem: BigStreamer  \ncomponent: Monitoring  \njob_name: monitoring-app  \nhost_nodes:\n  - un5.bigdata.abc.gr\n  - un6.bigdata.abc.gr\nvip_host: un-vip.bigdata.abc.gr  \nport: 12800  \ncontainer_name: monitoring-app-{version}  \nconfig_path: /opt/monitoring_app/monitoring_config  \nlog_paths:\n  - /opt/monitoring-app/logs/monitoring-api.log\n  - /opt/monitoring-app/logs/tomcat/access_log.log\ndatabase:\n  host: db-vip.bigdata.abc.gr:3306\n  user: monitoring\n  schema: monitoring\n  table: jobstatus\nmetrics_sink:\n  system: Graphite\n  host: un-vip.bigdata.abc.gr\n  port: 2004\nowner: monitoring  \ntags:\n  - monitoring\n  - jobstatus\n  - Graphite\n  - Docker\n  - container\n  - IPVPN\n  - BigStreamer\n  - MySQL\n  - logging\n  - health-check\n  - HAProxy\n  - load-balancer\n  - deployment\n  - cronjobs\n  - metrics\n---\n# Monitoring application\n## Overview\nThe purpose of application is to monitor all streamming and batch jobs through HTTP calls. Requests are written to database ``monitoring`` and table ``jobstatus``. Metrics about application performance are written to Graphite.\n## Deployment Details\n### App Deployment & Access\nDeployed on nodes **un5**, **un6**  \n- Host: `un5.bigdata.abc.gr`, `un6.bigdata.abc.gr`\n- Port: 12800\nReached via HAProxy  \n- Host: **un-vip.bigdata.abc.gr**\n- Port: 12800\n### Configuration Files\n `/opt/monitoring_app/monitoring_config`\n### Application Logs\nThese log files capture runtime and access events of the monitoring application. Use them for debugging service failures, connection issues, or API call errors.\n- application logs: `/opt/monitoring-app/logs/monitoring-api.log`\n  - older logs: `/opt/monitoring-app/logs/2022-11`\n- access logs:  `/opt/monitoring-app/logs/tomcat/access_log.log`\n### Monitoring Database (MySQL)\n- Host: db-vip.bigdata.abc.gr:3306\n- User: monitoring\n- Schema: monitoring\n- Table: jobstatus\n### Metrics Export to Graphite\n- Host: un-vip.bigdata.abc.gr\n- Port: 2004\n## Operations & Maintenance Procedures\n### Check Container Status\nDescribes how to verify if the Docker container running the monitoring app is active or stopped, and how to restart it when necessary.\n#### Container\n| Description| Command |\n| ----------- | ----------- |\n|check container is running| `sudo docker ps --filter=\"name=monitoring-app-{version}\" --filter=\"status=running\"`|\n|check container is stopped| `sudo docker ps --filter=\"name=monitoring-app-{version}\" --filter=\"status=exited\"`|\n|check container status| `sudo docker ps --filter=\"name=monitoring-app-{version}\"`|\n|stop monitoring-app| `sudo docker stop monitoring-app-{version}`|\n|start monitoring-app|`sudo docker start monitoring-app-{version}`|\n|run monitoring-app if container is killed & removed|[use start app script](https://metis.ghi.com/obss/bigdata/common-dev/apps/monitoring/monitoring-devops/-/wikis/Deployment-PROD#run-start-up-script)|\n### Stop & Start Monitoring App\n#### Connect to nodes\n1. SSH to un2   \n`ssh root@un2`\n2. SSH to un5/un6 nodes via personal sudoer user.  \n(superuser privileges to perform Docker operations)\n   1. `ssh <user>@<un5/un6>`\n   1. `sudo su`\n#### Stop current container\n1. Get container name with docker ps as described above\n2. Stop container  \n`docker stop monitoring-app-{version}`\n#### Start stopped container\nTo start the container using the latest version (the latest container version is the one that was stopped with the previous command) use,\n`docker start monitoring-app-{version}`\n### Application API Endpoints\n- Using un5 IP\n| Description | Command |\n| ----------- | ----------- |\n| Check app is running | `curl --location --request GET 'http://999.999.999.999:12800/monitoring/app/status'` |\n| Check Load Balancer is enabled | `curl --location --request GET 'http://999.999.999.999:12800/monitoring/app/lb/check' `|\n| Enable Load Balancer | `curl --location --request PUT 'http://999.999.999.999:12800/monitoring/app/lb/enable'` |\n| Disable Load Balancer  | `curl --location --request PUT 'http://999.999.999.999:12800/monitoring/app/lb/disable'`|\n### Troubleshooting Steps\n- Check [logs](#logs) to identify the problem \n### Deployment Guide\n- [Deployment guide](https://metis.ghi.com/obss/bigdata/common-dev/apps/monitoring/monitoring-devops/-/wikis/Deployment-PROD)"
          },
          {
            "question": "What are the steps to manually check if the monitoring-app container is running and restart it if needed?",
            "answer": "You can check and manage the monitoring-app container with the following commands:\n```bash\n# Check if running\nsudo docker ps --filter=\"name=monitoring-app-{version}\" --filter=\"status=running\"\n# Stop container\nsudo docker stop monitoring-app-{version}\n# Start container\nsudo docker start monitoring-app-{version}\n```",
            "category": "Application Functionality & Flow",
            "files": "manage-monitoring-app.md",
            "context": "---\ntitle: Monitoring Application  \nsystem: BigStreamer  \ncomponent: Monitoring  \njob_name: monitoring-app  \nhost_nodes:\n  - un5.bigdata.abc.gr\n  - un6.bigdata.abc.gr\nvip_host: un-vip.bigdata.abc.gr  \nport: 12800  \ncontainer_name: monitoring-app-{version}  \nconfig_path: /opt/monitoring_app/monitoring_config  \nlog_paths:\n  - /opt/monitoring-app/logs/monitoring-api.log\n  - /opt/monitoring-app/logs/tomcat/access_log.log\ndatabase:\n  host: db-vip.bigdata.abc.gr:3306\n  user: monitoring\n  schema: monitoring\n  table: jobstatus\nmetrics_sink:\n  system: Graphite\n  host: un-vip.bigdata.abc.gr\n  port: 2004\nowner: monitoring  \ntags:\n  - monitoring\n  - jobstatus\n  - Graphite\n  - Docker\n  - container\n  - IPVPN\n  - BigStreamer\n  - MySQL\n  - logging\n  - health-check\n  - HAProxy\n  - load-balancer\n  - deployment\n  - cronjobs\n  - metrics\n---\n# Monitoring application\n## Overview\nThe purpose of application is to monitor all streamming and batch jobs through HTTP calls. Requests are written to database ``monitoring`` and table ``jobstatus``. Metrics about application performance are written to Graphite.\n## Deployment Details\n### App Deployment & Access\nDeployed on nodes **un5**, **un6**  \n- Host: `un5.bigdata.abc.gr`, `un6.bigdata.abc.gr`\n- Port: 12800\nReached via HAProxy  \n- Host: **un-vip.bigdata.abc.gr**\n- Port: 12800\n### Configuration Files\n `/opt/monitoring_app/monitoring_config`\n### Application Logs\nThese log files capture runtime and access events of the monitoring application. Use them for debugging service failures, connection issues, or API call errors.\n- application logs: `/opt/monitoring-app/logs/monitoring-api.log`\n  - older logs: `/opt/monitoring-app/logs/2022-11`\n- access logs:  `/opt/monitoring-app/logs/tomcat/access_log.log`\n### Monitoring Database (MySQL)\n- Host: db-vip.bigdata.abc.gr:3306\n- User: monitoring\n- Schema: monitoring\n- Table: jobstatus\n### Metrics Export to Graphite\n- Host: un-vip.bigdata.abc.gr\n- Port: 2004\n## Operations & Maintenance Procedures\n### Check Container Status\nDescribes how to verify if the Docker container running the monitoring app is active or stopped, and how to restart it when necessary.\n#### Container\n| Description| Command |\n| ----------- | ----------- |\n|check container is running| `sudo docker ps --filter=\"name=monitoring-app-{version}\" --filter=\"status=running\"`|\n|check container is stopped| `sudo docker ps --filter=\"name=monitoring-app-{version}\" --filter=\"status=exited\"`|\n|check container status| `sudo docker ps --filter=\"name=monitoring-app-{version}\"`|\n|stop monitoring-app| `sudo docker stop monitoring-app-{version}`|\n|start monitoring-app|`sudo docker start monitoring-app-{version}`|\n|run monitoring-app if container is killed & removed|[use start app script](https://metis.ghi.com/obss/bigdata/common-dev/apps/monitoring/monitoring-devops/-/wikis/Deployment-PROD#run-start-up-script)|\n### Stop & Start Monitoring App\n#### Connect to nodes\n1. SSH to un2   \n`ssh root@un2`\n2. SSH to un5/un6 nodes via personal sudoer user.  \n(superuser privileges to perform Docker operations)\n   1. `ssh <user>@<un5/un6>`\n   1. `sudo su`\n#### Stop current container\n1. Get container name with docker ps as described above\n2. Stop container  \n`docker stop monitoring-app-{version}`\n#### Start stopped container\nTo start the container using the latest version (the latest container version is the one that was stopped with the previous command) use,\n`docker start monitoring-app-{version}`\n### Application API Endpoints\n- Using un5 IP\n| Description | Command |\n| ----------- | ----------- |\n| Check app is running | `curl --location --request GET 'http://999.999.999.999:12800/monitoring/app/status'` |\n| Check Load Balancer is enabled | `curl --location --request GET 'http://999.999.999.999:12800/monitoring/app/lb/check' `|\n| Enable Load Balancer | `curl --location --request PUT 'http://999.999.999.999:12800/monitoring/app/lb/enable'` |\n| Disable Load Balancer  | `curl --location --request PUT 'http://999.999.999.999:12800/monitoring/app/lb/disable'`|\n### Troubleshooting Steps\n- Check [logs](#logs) to identify the problem \n### Deployment Guide\n- [Deployment guide](https://metis.ghi.com/obss/bigdata/common-dev/apps/monitoring/monitoring-devops/-/wikis/Deployment-PROD)"
          },
          {
            "question": "How can I troubleshoot ingestion delays in the Online Spark Streaming flow?",
            "answer": "First, check if the Spark application is still running in Cloudera Manager under YARN > Applications. If not, re-submit the topology using the appropriate submit script. If it is running but alert thresholds are exceeded, investigate HBase or Kudu delays and check application logs for errors. Restarting the topology might be necessary.",
            "category": "Troubleshooting & Issue Resolution",
            "files": "online.md",
            "context": "---\ntitle: \"Online\"\ndescription: \"Real-time and batch ingestion pipeline for Online transactions. Covers Wildfly, Kafka, Spark Streaming, daily batch jobs, hourly merging, and query handling for downstream applications and reporting.\"\ntags:\n  - online\n  - ingestion\n  - kafka\n  - spark\n  - kudu\n  - hbase\n  - wildfly\n  - streaming\n  - batch\n  - parquet\n  - queries\n  - impala\n  - retention\n  - oozie\n  - prodrest\n---\n# Online\n## Stream\nProcesses Online transaction events in real-time from backend servers via Wildfly and Kafka, storing them through Spark into Kudu and HBase.\n### Wildfly Transaction Ingestion\nWildfly instances receive HTTP POST events from backend servers, loadbalanced through NetScaler, and forward them to Kafka topics at the active site.\nUser generated events are sent to Wildfly instances installed at edge servers as HTTP POST requests. The requests originate from the backend servers of Internet Banking. Requests are loadbalanced by NetScaler (Loadbalancer) that is managed by mno's networking department. The events are then sent to a Kafka topic. Usually only one site is active (Primary Site).\n```mermaid\n  graph TD\n  A[Online Backend Servers] -->|HTTP Requests| B[Load Balancer - Netscaler]\n  B -->|Active| C[pr1edge01.mno.gr]\n  B -->|Active| D[pr1edge02.mno.gr]\n  B -.->|Stopped| E[dr1edge01.mno.gr]\n  B -.->|Stopped| F[dr1edge02.mno.gr]\n  C -->|Kafka Producer| G[Primary Site's Kafka: prod-trlog-online-ingest-stream-mir]\n  D -->|Kafka Producer| G\n  E -.->|Stopped| H[Disaster Site's Kafka: prod-trlog-online-ingest-stream-mir]\n  F -.->|Stopped| H\n```\n**User**: `PRODREST`\n**Installation Path**: `/opt/wildfly/default/prodreston`\n**Deployments Path**: `/opt/wildfly/default/prodreston/standalone/deployments`\n**General Configuration Path**: `/opt/wildfly/default/prodreston/standalone/configuration/standalone.xml`\n**Application Configuration Path**: `/opt/wildfly/default/prodreston/standalone/configuration/BigStreamer/beanconfig/translogApiOnlineJmxConfig.xml`\n**Application Logs**: `/var/log/wildfly/prodreston/server.log`\n**Access Log**: `/var/log/wildfly/prodreston/access.log`\n**Instructions for start/stop**: [Here](../procedures/manage_wildfly.md)\n**Instructions for migrating traffic to DR site**: [Here](../procedures/failover.md)\n**Alerts**:\n- [PR][ONLINE] REST Endpoints Average Response Time\n- [DR][ONLINE] REST Endpoints Average Response Time\n- [PR][ONLINE] Ingestion Average Error rate\n- [DR][ONLINE] Ingestion Average Error rate\n**Troubleshooting Steps**:\n- Check application logs for error messages.\n- In case there are many errors in the application logs, try to restart the problematic Wildfly instance with the provided instructions.\n- If the logs do not indicate a specific problem, check for any problems regarding Kafka performance.\n### Kafka Mirroring via MirrorMaker\nExplains how Kafka MirrorMaker replicates `-mir` topics between sites to ensure high availability and simplify failover.\nAfter being published to Kafka, the traffic is mirrored to the opposite site via Kafka MirrorMaker. In order to be able to have both Sites active at any given time and simplify the failover procedure the each Site produce messages to a topic with the suffix `-mir`. The topics with the `-mir` suffix contain events published to the Site. The `-mir` topics are then copied via Kafka MirrorMakers to the final topics (no `-mir` suffix), that has all the messages from both Sites.\n#### PR replication\n```mermaid\n  graph TD\n  A[pr1edge01.mno.gr] -->|Kafka Producer| C[PR Site Kafka: prod-trlog-online-ingest-stream-mir]\n  B[pr1edge02.mno.gr] -->|Kafka Producer| C\n  D[dr1edge01.mno.gr] -.->|Stopped| F[DR Site Kafka: prod-trlog-online-ingest-stream-mir]\n  E[dr1edge02.mno.gr] -.->|Stopped| F\n  C -->|Kafka MirrorMakers <br> pr1node01.mno.gr/pr1node04.mno.gr| G[PR Site Kafka: prod-trlog-online-ingest-stream]\n  F -->|Kafka MirrorMakers <br> pr1node05.mno.gr/pr1node06.mno.gr| G[PR Site Kafka: prod-trlog-online-ingest-stream]\n```\n#### DR replication\n``` mermaid\n  graph TD\n  A[pr1edge01.mno.gr] -->|Kafka Producer| C[PR Site Kafka: prod-trlog-online-ingest-stream-mir]\n  B[pr1edge02.mno.gr] -->|Kafka Producer| C\n  D[dr1edge01.mno.gr] -.->|Stopped| F[DR Site Kafka: prod-trlog-online-ingest-stream-mir]\n  E[dr1edge02.mno.gr] -.->|Stopped| F\n  F -->|Kafka MirrorMakers <br> dr1node01.mno.gr/dr1node04.mno.gr| H[DR Site Kafka: prod-trlog-online-ingest-stream]\n  C -->|Kafka MirrorMakers <br> dr1node05.mno.gr/dr1node06.mno.gr| H[DR Site Kafka: prod-trlog-online-ingest-stream]\n```\n**MirrorMaker User**: `kafka`\n**Configuration**: Cloudera Manager\n**Logs**: Cloudera Manager\n**Instructions for start/stop**: [Here](../procedures/manage_mirrormaker.md)\n**Alerts**:\n- Cloudera Manager alerts regarding Kafka\n### Spark Streaming Topologies\nDescribes the Spark Streaming topologies that consume Kafka data and write them to Kudu and HBase, including support for oversized columns.\nAfter being sent to the final Kafka topic, the records are consumed by two separate Spark Streaming topologies\n#### Prod_Online_IngestStream\nThis topology takes all records from the final Kafka topics, extracts some values and writes them to a Kudu table. It also inserts some columns that are too big for Kudu to an HBase table. This topology runs independently **on both clusters**.\n``` mermaid\n  graph TD\n  A[Kafka: prod-trlog-online-ingest-stream] --> B[Spark: Prod_Online_IngestStream]\n  B --> C[Kudu: prod_trlog_online.service_audit_stream]\n  B --> D[HBase: PROD_ONLINE:SERVICE_AUDIT_STREAM]\n```\n**User**: `PRODREST`\n**Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Submit Script**: `/opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_stream_cluster_mno_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- [PR][ONLINE] Spark Waiting Batches\n- [DR][ONLINE] Spark Waiting Batches\n**Troubleshooting Steps**:\n- If the alert chart has **no line**, ensure that the application is not running (Cloudera Manager > YARN > Applications) and then submit the topology using the **Submit Script**. After resubmitting the application check the old application logs for the root cause that it failed\n- If the alert has exceeded the threshold, investigate HBase/Kudu for delays and check the application logs for any errors. You can also try to kill (use Cloudera Manager or yarn command) and then re-submit the topology.\n## Batch\nOutlines the batch workflows that enrich and aggregate daily Online transactions, merge data across systems, and prepare output for consumption.\n### Daily Batch Controller Script\nMain daily batch coordinator that orchestrates MergeBatch, aggregation, retention cleanup, and reporting steps across both clusters.\nAs mentioned before, the information processed by the [Prod_Online_IngestStream](#prod_online_ingeststream) topology is stored in Kudu/HBase tables. At the end of each day (at **4:15 am in PR & DR site** by **Cron**) the records from HBase/Kudu is enriched with additional information and the transfered to a parquet table. After the data are inserted to the parquet table, sequent jobs are triggered to produce aggregations and data for external systems. This procedure runs **independantly on both sites**.\n**User**: `PRODREST`\n**Logs**: `/var/log/ingestion/PRODREST/online/log/online_daily_batch_jobs.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/online_daily_batch_jobs_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- _See below_\n**Troubleshooting Steps**:\nThis procedure runs multiple steps which we will describe below with seperate troubleshooting steps for each step. Use the following steps for all alarms as a general guide:\n- Identify the failed step using the alarm name\n- Identify the root cause for the failed job based on the logs of the submit script/cluster application/query\n- If the problem is with an external system, ask the customer to inform the owners of the external system\n- if the problem is temporary or if you cannot determine the root cause of the problem, try to re-run the failed application\n### Sub-steps\nThe following steps run **on both clusters independently**, unless specified otherwise.\n#### Merge Batch to Final Table\nThis step transfers transactions ingested by the [Stream](#stream) flow to an intermediate table and deletes the data from the original tables.\n``` mermaid\n  graph TD\n  A[Kudu: prod_trlog_online.service_audit_stream] --> B[Spark: PROD_Online_MergeBatch]\n  C[HBase: PROD_ONLINE:SERVICE_AUDIT_STREAM] --> B\n  B --> D[Impala: prod_trlog_online.service_audit]\n  ```\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/cronExecutor_OnlineBatch_full.log`\n**Spark Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Script**: `/opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- Online_Ingestion MergeBatch JOB\n**Troubleshooting Steps**:\n- Use the script/spark logs to identify the cause of the failure\n- Ensure that no records are present in prod_trlog_online.service_audit\n  ``` bash\n  # eg. 09-11-2019\n  impala-shell -k --ssl -i ${HOSTNAME/01/} -q \"select  count(*) from prod_trlog_online.service_audit where par_dt='20191109';\"\n  ```\n- If no records exist and no other process is up, you can ran the script again.\n  - For the previous day:\n    ``` bash\n    /opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh /user/PRODREST/lock/PROD_Online_MergeBatch LOCK_ONLINE_PROD_BATCH_MERGE_TRANS /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh PROD_Online_MergeBatch  /opt/ingestion/PRODREST/online/lock/ FULL 1800 \"`date --date='-1 day' '+%Y-%m-%d 00:00:00'`\" \"`date '+%Y-%m-%d 00:00:00'`\"  >> /var/log/ingestion/PRODREST/online/log/cronExecutor_onlineBatch_full.log 2>&1 &\n    ```\n  - For a specified date:\n    ``` bash\n    # eg. 09-11-2019\n    /opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh /user/PRODREST/lock/PROD_Online_MergeBatch LOCK_ONLINE_PROD_BATCH_MERGE_TRANS /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh PROD_Online_MergeBatch  /opt/ingestion/PRODREST/online/lock/ FULL 1800 \"2019-11-09 00:00:00\" \"2019-11-10 00:00:00\"   >> /var/log/ingestion/PRODREST/online/log/cronExecutor_onlineBatch_full.log 2>&1 &\n    ```\n- The process runs for well 30 minutes under normal circumstances or even longer for heavy load. Use of `screen` command advised\n- If the problem is with resources (out-of-memory errors):\n  - You can adjust the values at `/opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh`. At the moment these values are as high as they can go.\n  - You can run the MergeBatch for parts of the day\n    ``` bash\n    # eg. 09-11-2019\n    /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 00:00:00\" \"2019-11-09 12:00:00\"\n    /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 12:00:00\" \"2019-11-09 18:00:00\"\n    /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 18:00:00\" \"2019-11-10 00:00:00\"\n    ```\n- Run the rest of the steps\n#### Report stats to Graphite\nReports statistics about the ingestion process.\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/cron_report_stats.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/report_stats_impala_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- This process is not monitored\n- You can safely skip this step\n- Sample execution:\n  ``` bash\n  nohup  /opt/ingestion/PRODREST/common/scripts/report_stats_impala_STABLE.sh prod_trlog_online.service_audit online >> /var/log/ingestion/PRODREST/online/log/cron_report_stats.log\n  ```\n- Run the rest of the steps\n#### Drop Hourly MergeBatch Partitions (DR)\nNdef: **ONLY DR SITE**\nDrop partitions from the [Hourly Merge Batch](#hourly-merge-batch) tables\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/drop_hourly_partitions.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh`\n**Alerts**:\n- Online_Migration Drop hourly partitions JOB\n**Troubleshooting Steps**:\n- Ensure that you are running steps for the DR site\n- If you are running the steps for the Primary skip this step\n- Use the script logs to identify the cause of the failure\n- For the previous day:\n  ``` bash\n  nohup /opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh \"prod_trlog_online.service_audit_hourly\" \"`date -d '-1 day' '+%Y%m%d'`\" >> /var/log/ingestion/PRODREST/online/log/drop_hourly_partitions.log 2>&1 &\n  ```\n- For a specified date:\n  ``` bash\n  # e.g. 09-11-2019\n  nohup /opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh \"prod_trlog_online.service_audit_hourly\" \"20191109\" >> /var/log/ingestion/PRODREST/online/log/drop_hourly_partitions.log 2>&1 &\n  ```\n- Run the rest of the steps\n#### Aggregation to Analytical Tables\nThis flow computes aggregations for use with the [Queries](#queries).\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/update_online_aggr_tables.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/update_online_aggr_tables_STABLE.sh`\n**Alerts**:\n- Online_Migration Aggregations JOB\n- Online_Migration Aggregation_SA Impala_Insert\n- Online_Migration Aggregation_SA_Index Kudu_Insert\n**Troubleshooting Steps**:\n- For the previous day:\n  ``` bash\n  /opt/ingestion/PRODREST/common/scripts/update_online_aggr_tables_STABLE.sh prod_trlog_online.service_audit prod_trlog_online.aggr_service_audit prod_trlog_online.aggr_service_audit_idx  >> /var/log/ingestion/PRODREST/online/log/update_online_aggr_tables.log 2>&1 &\n  ```\n- For a specified date:\n  ``` bash\n  # e.g. 09-11-2019\n  /opt/ingestion/PRODREST/common/scripts/update_online_aggr_tables_STABLE.sh prod_trlog_online.service_audit prod_trlog_online.aggr_service_audit prod_trlog_online.aggr_service_audit_idx 20191109 >> /var/log/ingestion/PRODREST/online/log/update_online_aggr_tables.log 2>&1\n  ```\n- Run the rest of the steps\n#### Send Daily Duplicate Reports\nSends email reports to users for duplicate transaction IDS and leftover transactions in `prod_trlog_online.service_audit_stream`.\n**User**: `PRODREST`\n**Script Logs**: `-`\n**Script**: `-`\n**Alerts**:\n- Online_Ingestion GUID_Report Impala\n- Online_Ingestion GUID_Report JOB\n**Troubleshooting Steps**:\n- Check `/var/log/ingestion/PRODREST/online/log/online_report_duplicate_identical.log` for errors\n- You can safely skip this step if not running for the previous day\n- Sample execution:\n  ``` bash\n  /opt/ingestion/PRODREST/common/scripts/online_report_duplicate_identical_STABLE.sh  `date -d '-1 day' '+%Y%m%d'`  prod_trlog_online service_audit service_audit_duplicates >> /var/log/ingestion/PRODREST/online/log/online_report_duplicate_identical.log 2>&1 &\n  /opt/ingestion/PRODREST/common/scripts/report_duplicates_kudu_hbase_impala_STABLE.sh `date --date='-1 day' '+%Y%m%d'` prod_trlog_online.service_audit_stream prod_trlog_online.service_audit_old online >> /var/log/ingestion/PRODREST/online/log/report_duplicates_kudu_hbase_impala.log 2>&1 &\n  ```\n#### Duplicates between Impala and Kudu/HBase\nDelete data which exist both Impala and Kudu. Sometimes MergeBatch fails because YARN kills executors for exceeding memory limits. AS a result, transactions are inserted to impala and job fails before drop them from kudu and HBase\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/report_duplicates_kudu_hbase_impala.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/report_duplicates_kudu_hbase_impala_STABLE.sh`\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Check `/var/log/ingestion/PRODREST/online/log/report_duplicates_kudu_hbase_impala.log` for errors\n- You can safely skip this step if not running for the previous day\n- Sample execution:\n  ``` bash\n  /opt/ingestion/PRODREST/common/scripts/report_duplicates_kudu_hbase_impala_STABLE.sh `date --date='-1 day' '+%Y%m%d'` prod_trlog_online.service_audit_stream prod_trlog_online.service_audit_old online >> /var/log/ingestion/PRODREST/online/log/report_duplicates_kudu_hbase_impala.log 2>&1\n  ```\n### Hourly Merge to Intermediate Table\nEvery hour a  transfers transactions ingested by the [Stream](#stream) flow to an intermediate table and without deleting the data from the original tables. This table is used by mno to query the latest transactions.\n``` mermaid\n  graph TD\n  A[Kudu: prod_trlog_online.service_audit_stream] --> B[Spark: PROD_Online_MergeBatch_Hourly]\n  C[HBase: PROD_ONLINE:SERVICE_AUDIT_STREAM] --> B\n  B --> D[Impala: prod_trlog_online.service_audit_hourly]\n  ```\n**User**: `PRODREST`\n**Spark Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Alerts**:\n- Not Monitored*\n**Troubleshooting Steps**:\n- Use the spark logs to identify the cause of the failure\n- The data in the Hourly tables is only for the current day. No need to fill missing hours, as the next MergeBatch will insert the data to the final table.\n## Queries\nDetails the query layer used by Online applications to fetch transaction records through Impala via REST APIs hosted in Wildfly.\nThe ingested data are queried in order to be displayed by the Online application (used by branches). The queries are submitted to the cluster as HTTP requests using the same Wildfly instances as the [Stream](#stream) flow.\n```mermaid\n  graph TD\n  A[Online Backend Servers] -->|HTTP Requests| B[Load Balancer - Netscaler]\n  B -->|Active| C[pr1edge01.mno.gr]\n  B -->|Active| D[pr1edge02.mno.gr]\n  B -.->|Stopped| E[dr1edge01.mno.gr]\n  B -.->|Stopped| F[dr1edge02.mno.gr]\n  C -->|Impala JDBC | G[Primary Site]\n  D -->|Impala JDBC | G\n  E -.->|Stopped| H[Disaster Site]\n  F -.->|Stopped| H\n```\n**User**: `PRODREST`\n**Installation Path**: `/opt/wildfly/default/prodreston`\n**Deployments Path**: `/opt/wildfly/default/prodreston/standalone/deployments`\n**General Configuration Path**: `/opt/wildfly/default/prodreston/standalone/configuration/standalone.xml`\n**Application Configuration Path**: `/opt/wildfly/default/prodreston/standalone/configuration/BigStreamer/beanconfig/translogApiOnlineJmxConfig.xml`\n**Application Logs**: `/var/log/wildfly/prodreston/server.log`\n**Access Log**: `/var/log/wildfly/prodreston/access.log`\n**Instructions for start/stop**: [Here](../procedures/manage_wildfly.md)\n**Instructions for migrating traffic to DR site**: [Here](../procedures/failover.md)\n**Alerts**:\n- [PR][ONLINE] Query Average Response Time\n- [DR][ONLINE] Query Average Response Time\n- [PR][ONLINE] Query Average Error rate\n- [DR][ONLINE] Query Average Error rate\n- [PR][ONLINE] REST Endpoints Average Response Time\n- [DR][ONLINE] REST Endpoints Average Response Time\n**Troubleshooting Steps**:\n- Check in Grafana dashboard `MONITORING/Monitoring Alerts` the charts that are in alerting state\n- Check if the response time is constant, a single query can increase the mean value of the response time. Check the access log for entries with large response time for the specific endpoint. If it is an isolated query the customer is not impacted.\n- Check application logs for error messages.\n- In case there are many errors in the application logs, try to restart the problematic Wildfly instance with the provided instructions.\n- If the logs do not indicate a specific problem, check for any problems regarding Impala/Kudu\n### Query Endpoints\nQueries regarding Online query Impala tables stored in both HDFS and Kudu.\n**Endpoints**:\n- dynamic search\n- by-id\n- by-core-fields\n- by-application\n- top-by-branchcode-clientusername\n- first-by-branchcode-computername\n- aggr-computernum-usernum-transnum-groupby-branchcode\n- aggr-transnum-groupby-branchcode-clientusername-by-branchcode\n- aggr-opcodenum-transnum-groupby-opclass\n- aggr-transnum-groupby-opclass-opcode-by-opclass\n## Retention Mechanism\nRetention scripts and cron jobs that purge old transaction data from Impala, HDFS, and HBase based on date thresholds to manage system size.\n### Impala Retention\n#### DEV\nEvery day (at **16:05 on DR site only** by **Cron**). This script drops partitions from impala table `dev_trlog_online.service_audit` older than 60 days.\n**User**: `DEVREST`\n**Script Logs**: `/var/log/ingestion/DEVREST/common/log/retention_mechanism_daily.log`\n**Script**: `/opt/ingestion/DEVREST/common/scripts/retention_mechanism_daily_STABLE.sh`\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- After the root cause for the failure is resolved, run manually the following command\n  ``` bash  \n  /opt/ingestion/DEVREST/common/scripts/retention_mechanism_daily_STABLE.sh >> /var/log/ingestion/DEVREST/common/log/retention_mechanism_daily.log 2>&1\n  ```\n### Additional Tables\nKudu table's `prod_trlog_online.service_audit_stream` partitions are maintained by an Oozie jobs every day. See section [Create next week kudu partitions](#create-next-week-kudu-partitions).\nParquet table's `prod_trlog_online.service_audit_hourly` partitions are dropped after each successful Merge run. See section [Drop hourly partitions](#drop-hourly-partitions).\n### HBase retention\nEvery day (at **16:15 in both sites** by **Cron**) This script deletes rows from hbase `PROD_ONLINE:SERVICE_AUDIT_STREAM` which refere to transactions inserted 7 days ago. Those rows may have been not deleted properly after merge batch job. To do so the topology queries rows from impala table `prod_trlog_online.service_audit` inside partition with par_dt refering 7 days ago.\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/daily_tools_cleanupHBaseSAS.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/daily_tools_cleanupHBaseSAS.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr`\n**Alerts**:\n- Retention OnlineCleanupHbaseSAS JOB\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- After the root cause for the failure is resolved, check on `/opt/ingestion/PRODREST/no_bkp/duplicate_cid_hbase` if a manual re-run must be done for a specific date\n  - For a specified date eg 2022-06-30:\n    ``` bash\n    /opt/ingestion/PRODREST/common/spark/submit/submitmnoSparkTopology_tools_cleanupHbaseSAS prod_trlog_online.service_audit PROD_ONLINE:SERVICE_AUDIT_STREAM LIST 20220630\n    ```\n##  Oozie Jobs\nScheduled Oozie jobs for importing lookup tables and managing future Kudu partitions for Online service audit tables.\n###  Lookup tables\nEvery day (at 07:00 by Oozie on DR & PR site ), we transfers 3 tables with reference data from the legacy MSSQL server, which is managed by mno, to the cluster. We keep only latest version to BigData (no partition).\n**User**: `PRODREST`\n**Coordinator**: `Coord_OnlineLookupTables_PROD`\n**Workflow**: `ImportLookupTables`\n**Local path**: `/opt/ingestion/PRODREST/hdfs_mirror/lookupTables/import_lookup_tables.sh`\n**Logs**: from HUE\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Open Hue to find coordinator status and logs\n###  Create next week kudu partitions\nEvery day (at 10:10 by Oozie on DR site and 10:30 by Oozie on PR site ), we delete old Kudu partitions and add new Kudu partitions on `prod_trlog_online.service_audit_stream`.\n**User**: `PRODREST`\n**Coordinator**: `Coord_OnlineCreateKuduPartitionsPROD`\n**Workflow**: `CreateKuduPartitionsPROD`\n**Local path**: `/opt/ingestion/PRODREST/hdfs_mirror/create_kudu_partition/create_next_weeks_partitions.sh`\n**Logs**: from HUE\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Open Hue to find coordinator status and logs\nThere is a case that merge batch has not properly run for a specific date, **even though** the transactions for that specific date are present on impala `service_audit`. For example by moving a service_audit partiton from DR to PR or vice versa, or when merge batch failed **after** deleting transactions from kudu.\nIn that case we can manually mark merge batch as complete for that date, and therefore next oozie job created by `Coord_OnlineCreateKuduPartitionsPROD` will delete that partition from kudu, by manipulating HBase table `PROD_ONLINE:MERGE_BATCH_STATE_INFO`.\nExample for a specific date (10/10/2022):\n - Run HBase shell\n ```\n   hbase shell\n   ```\n - And then inside HBase shell:\n ```\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_hbase', 'true'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_hbase_time','0'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_kudu', 'true'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_kudu_time', '0'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:running', 'false'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:running+time', '0'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:write_impala', 'true'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:write_impala_time', '0'\n   ```\n#### DEV\nEvery day (at **11:00 by Oozie** on **DR site only** ), we delete old Kudu partitions and add new Kudu partitions on `dev_trlog_online.service_audit_stream`.\n**User**: `DEVREST`\n**Coordinator**: `Coord_OnlineCreateKuduPartitionsDEV`\n**Workflow**: `CreateKuduPartitionsDEV`\n**Local path**: `/opt/ingestion/DEVREST/hdfs_mirror/create_kudu_partition/create_next_weeks_partitions.sh`\n**Logs**: from HUE\n**Alerts**:\n- Not Monitored"
          },
          {
            "question": "What command can be used to verify if the Online MergeBatch step successfully inserted records for a given day?",
            "answer": "You can verify the insert by querying Impala with:\n```bash\nimpala-shell -k --ssl -i ${HOSTNAME/01/} -q \"select count(*) from prod_trlog_online.service_audit where par_dt='20191109';\"\n```",
            "category": "Troubleshooting & Issue Resolution",
            "files": "online.md",
            "context": "---\ntitle: \"Online\"\ndescription: \"Real-time and batch ingestion pipeline for Online transactions. Covers Wildfly, Kafka, Spark Streaming, daily batch jobs, hourly merging, and query handling for downstream applications and reporting.\"\ntags:\n  - online\n  - ingestion\n  - kafka\n  - spark\n  - kudu\n  - hbase\n  - wildfly\n  - streaming\n  - batch\n  - parquet\n  - queries\n  - impala\n  - retention\n  - oozie\n  - prodrest\n---\n# Online\n## Stream\nProcesses Online transaction events in real-time from backend servers via Wildfly and Kafka, storing them through Spark into Kudu and HBase.\n### Wildfly Transaction Ingestion\nWildfly instances receive HTTP POST events from backend servers, loadbalanced through NetScaler, and forward them to Kafka topics at the active site.\nUser generated events are sent to Wildfly instances installed at edge servers as HTTP POST requests. The requests originate from the backend servers of Internet Banking. Requests are loadbalanced by NetScaler (Loadbalancer) that is managed by mno's networking department. The events are then sent to a Kafka topic. Usually only one site is active (Primary Site).\n```mermaid\n  graph TD\n  A[Online Backend Servers] -->|HTTP Requests| B[Load Balancer - Netscaler]\n  B -->|Active| C[pr1edge01.mno.gr]\n  B -->|Active| D[pr1edge02.mno.gr]\n  B -.->|Stopped| E[dr1edge01.mno.gr]\n  B -.->|Stopped| F[dr1edge02.mno.gr]\n  C -->|Kafka Producer| G[Primary Site's Kafka: prod-trlog-online-ingest-stream-mir]\n  D -->|Kafka Producer| G\n  E -.->|Stopped| H[Disaster Site's Kafka: prod-trlog-online-ingest-stream-mir]\n  F -.->|Stopped| H\n```\n**User**: `PRODREST`\n**Installation Path**: `/opt/wildfly/default/prodreston`\n**Deployments Path**: `/opt/wildfly/default/prodreston/standalone/deployments`\n**General Configuration Path**: `/opt/wildfly/default/prodreston/standalone/configuration/standalone.xml`\n**Application Configuration Path**: `/opt/wildfly/default/prodreston/standalone/configuration/BigStreamer/beanconfig/translogApiOnlineJmxConfig.xml`\n**Application Logs**: `/var/log/wildfly/prodreston/server.log`\n**Access Log**: `/var/log/wildfly/prodreston/access.log`\n**Instructions for start/stop**: [Here](../procedures/manage_wildfly.md)\n**Instructions for migrating traffic to DR site**: [Here](../procedures/failover.md)\n**Alerts**:\n- [PR][ONLINE] REST Endpoints Average Response Time\n- [DR][ONLINE] REST Endpoints Average Response Time\n- [PR][ONLINE] Ingestion Average Error rate\n- [DR][ONLINE] Ingestion Average Error rate\n**Troubleshooting Steps**:\n- Check application logs for error messages.\n- In case there are many errors in the application logs, try to restart the problematic Wildfly instance with the provided instructions.\n- If the logs do not indicate a specific problem, check for any problems regarding Kafka performance.\n### Kafka Mirroring via MirrorMaker\nExplains how Kafka MirrorMaker replicates `-mir` topics between sites to ensure high availability and simplify failover.\nAfter being published to Kafka, the traffic is mirrored to the opposite site via Kafka MirrorMaker. In order to be able to have both Sites active at any given time and simplify the failover procedure the each Site produce messages to a topic with the suffix `-mir`. The topics with the `-mir` suffix contain events published to the Site. The `-mir` topics are then copied via Kafka MirrorMakers to the final topics (no `-mir` suffix), that has all the messages from both Sites.\n#### PR replication\n```mermaid\n  graph TD\n  A[pr1edge01.mno.gr] -->|Kafka Producer| C[PR Site Kafka: prod-trlog-online-ingest-stream-mir]\n  B[pr1edge02.mno.gr] -->|Kafka Producer| C\n  D[dr1edge01.mno.gr] -.->|Stopped| F[DR Site Kafka: prod-trlog-online-ingest-stream-mir]\n  E[dr1edge02.mno.gr] -.->|Stopped| F\n  C -->|Kafka MirrorMakers <br> pr1node01.mno.gr/pr1node04.mno.gr| G[PR Site Kafka: prod-trlog-online-ingest-stream]\n  F -->|Kafka MirrorMakers <br> pr1node05.mno.gr/pr1node06.mno.gr| G[PR Site Kafka: prod-trlog-online-ingest-stream]\n```\n#### DR replication\n``` mermaid\n  graph TD\n  A[pr1edge01.mno.gr] -->|Kafka Producer| C[PR Site Kafka: prod-trlog-online-ingest-stream-mir]\n  B[pr1edge02.mno.gr] -->|Kafka Producer| C\n  D[dr1edge01.mno.gr] -.->|Stopped| F[DR Site Kafka: prod-trlog-online-ingest-stream-mir]\n  E[dr1edge02.mno.gr] -.->|Stopped| F\n  F -->|Kafka MirrorMakers <br> dr1node01.mno.gr/dr1node04.mno.gr| H[DR Site Kafka: prod-trlog-online-ingest-stream]\n  C -->|Kafka MirrorMakers <br> dr1node05.mno.gr/dr1node06.mno.gr| H[DR Site Kafka: prod-trlog-online-ingest-stream]\n```\n**MirrorMaker User**: `kafka`\n**Configuration**: Cloudera Manager\n**Logs**: Cloudera Manager\n**Instructions for start/stop**: [Here](../procedures/manage_mirrormaker.md)\n**Alerts**:\n- Cloudera Manager alerts regarding Kafka\n### Spark Streaming Topologies\nDescribes the Spark Streaming topologies that consume Kafka data and write them to Kudu and HBase, including support for oversized columns.\nAfter being sent to the final Kafka topic, the records are consumed by two separate Spark Streaming topologies\n#### Prod_Online_IngestStream\nThis topology takes all records from the final Kafka topics, extracts some values and writes them to a Kudu table. It also inserts some columns that are too big for Kudu to an HBase table. This topology runs independently **on both clusters**.\n``` mermaid\n  graph TD\n  A[Kafka: prod-trlog-online-ingest-stream] --> B[Spark: Prod_Online_IngestStream]\n  B --> C[Kudu: prod_trlog_online.service_audit_stream]\n  B --> D[HBase: PROD_ONLINE:SERVICE_AUDIT_STREAM]\n```\n**User**: `PRODREST`\n**Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Submit Script**: `/opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_stream_cluster_mno_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- [PR][ONLINE] Spark Waiting Batches\n- [DR][ONLINE] Spark Waiting Batches\n**Troubleshooting Steps**:\n- If the alert chart has **no line**, ensure that the application is not running (Cloudera Manager > YARN > Applications) and then submit the topology using the **Submit Script**. After resubmitting the application check the old application logs for the root cause that it failed\n- If the alert has exceeded the threshold, investigate HBase/Kudu for delays and check the application logs for any errors. You can also try to kill (use Cloudera Manager or yarn command) and then re-submit the topology.\n## Batch\nOutlines the batch workflows that enrich and aggregate daily Online transactions, merge data across systems, and prepare output for consumption.\n### Daily Batch Controller Script\nMain daily batch coordinator that orchestrates MergeBatch, aggregation, retention cleanup, and reporting steps across both clusters.\nAs mentioned before, the information processed by the [Prod_Online_IngestStream](#prod_online_ingeststream) topology is stored in Kudu/HBase tables. At the end of each day (at **4:15 am in PR & DR site** by **Cron**) the records from HBase/Kudu is enriched with additional information and the transfered to a parquet table. After the data are inserted to the parquet table, sequent jobs are triggered to produce aggregations and data for external systems. This procedure runs **independantly on both sites**.\n**User**: `PRODREST`\n**Logs**: `/var/log/ingestion/PRODREST/online/log/online_daily_batch_jobs.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/online_daily_batch_jobs_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- _See below_\n**Troubleshooting Steps**:\nThis procedure runs multiple steps which we will describe below with seperate troubleshooting steps for each step. Use the following steps for all alarms as a general guide:\n- Identify the failed step using the alarm name\n- Identify the root cause for the failed job based on the logs of the submit script/cluster application/query\n- If the problem is with an external system, ask the customer to inform the owners of the external system\n- if the problem is temporary or if you cannot determine the root cause of the problem, try to re-run the failed application\n### Sub-steps\nThe following steps run **on both clusters independently**, unless specified otherwise.\n#### Merge Batch to Final Table\nThis step transfers transactions ingested by the [Stream](#stream) flow to an intermediate table and deletes the data from the original tables.\n``` mermaid\n  graph TD\n  A[Kudu: prod_trlog_online.service_audit_stream] --> B[Spark: PROD_Online_MergeBatch]\n  C[HBase: PROD_ONLINE:SERVICE_AUDIT_STREAM] --> B\n  B --> D[Impala: prod_trlog_online.service_audit]\n  ```\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/cronExecutor_OnlineBatch_full.log`\n**Spark Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Script**: `/opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- Online_Ingestion MergeBatch JOB\n**Troubleshooting Steps**:\n- Use the script/spark logs to identify the cause of the failure\n- Ensure that no records are present in prod_trlog_online.service_audit\n  ``` bash\n  # eg. 09-11-2019\n  impala-shell -k --ssl -i ${HOSTNAME/01/} -q \"select  count(*) from prod_trlog_online.service_audit where par_dt='20191109';\"\n  ```\n- If no records exist and no other process is up, you can ran the script again.\n  - For the previous day:\n    ``` bash\n    /opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh /user/PRODREST/lock/PROD_Online_MergeBatch LOCK_ONLINE_PROD_BATCH_MERGE_TRANS /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh PROD_Online_MergeBatch  /opt/ingestion/PRODREST/online/lock/ FULL 1800 \"`date --date='-1 day' '+%Y-%m-%d 00:00:00'`\" \"`date '+%Y-%m-%d 00:00:00'`\"  >> /var/log/ingestion/PRODREST/online/log/cronExecutor_onlineBatch_full.log 2>&1 &\n    ```\n  - For a specified date:\n    ``` bash\n    # eg. 09-11-2019\n    /opt/ingestion/PRODREST/common/scripts/cronExecutor_MergeBatchWithLock_hdfs_STABLE.sh /user/PRODREST/lock/PROD_Online_MergeBatch LOCK_ONLINE_PROD_BATCH_MERGE_TRANS /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh PROD_Online_MergeBatch  /opt/ingestion/PRODREST/online/lock/ FULL 1800 \"2019-11-09 00:00:00\" \"2019-11-10 00:00:00\"   >> /var/log/ingestion/PRODREST/online/log/cronExecutor_onlineBatch_full.log 2>&1 &\n    ```\n- The process runs for well 30 minutes under normal circumstances or even longer for heavy load. Use of `screen` command advised\n- If the problem is with resources (out-of-memory errors):\n  - You can adjust the values at `/opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh`. At the moment these values are as high as they can go.\n  - You can run the MergeBatch for parts of the day\n    ``` bash\n    # eg. 09-11-2019\n    /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 00:00:00\" \"2019-11-09 12:00:00\"\n    /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 12:00:00\" \"2019-11-09 18:00:00\"\n    /opt/ingestion/PRODREST/online/spark/submit/submitmnoSparkTopology_batch_cluster_mno_STABLE.sh \"2019-11-09 18:00:00\" \"2019-11-10 00:00:00\"\n    ```\n- Run the rest of the steps\n#### Report stats to Graphite\nReports statistics about the ingestion process.\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/cron_report_stats.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/report_stats_impala_STABLE.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` (each edge server submits to a different cluster)\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- This process is not monitored\n- You can safely skip this step\n- Sample execution:\n  ``` bash\n  nohup  /opt/ingestion/PRODREST/common/scripts/report_stats_impala_STABLE.sh prod_trlog_online.service_audit online >> /var/log/ingestion/PRODREST/online/log/cron_report_stats.log\n  ```\n- Run the rest of the steps\n#### Drop Hourly MergeBatch Partitions (DR)\nNdef: **ONLY DR SITE**\nDrop partitions from the [Hourly Merge Batch](#hourly-merge-batch) tables\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/drop_hourly_partitions.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh`\n**Alerts**:\n- Online_Migration Drop hourly partitions JOB\n**Troubleshooting Steps**:\n- Ensure that you are running steps for the DR site\n- If you are running the steps for the Primary skip this step\n- Use the script logs to identify the cause of the failure\n- For the previous day:\n  ``` bash\n  nohup /opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh \"prod_trlog_online.service_audit_hourly\" \"`date -d '-1 day' '+%Y%m%d'`\" >> /var/log/ingestion/PRODREST/online/log/drop_hourly_partitions.log 2>&1 &\n  ```\n- For a specified date:\n  ``` bash\n  # e.g. 09-11-2019\n  nohup /opt/ingestion/PRODREST/common/scripts/drop_hourly_partitions_STABLE.sh \"prod_trlog_online.service_audit_hourly\" \"20191109\" >> /var/log/ingestion/PRODREST/online/log/drop_hourly_partitions.log 2>&1 &\n  ```\n- Run the rest of the steps\n#### Aggregation to Analytical Tables\nThis flow computes aggregations for use with the [Queries](#queries).\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/update_online_aggr_tables.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/update_online_aggr_tables_STABLE.sh`\n**Alerts**:\n- Online_Migration Aggregations JOB\n- Online_Migration Aggregation_SA Impala_Insert\n- Online_Migration Aggregation_SA_Index Kudu_Insert\n**Troubleshooting Steps**:\n- For the previous day:\n  ``` bash\n  /opt/ingestion/PRODREST/common/scripts/update_online_aggr_tables_STABLE.sh prod_trlog_online.service_audit prod_trlog_online.aggr_service_audit prod_trlog_online.aggr_service_audit_idx  >> /var/log/ingestion/PRODREST/online/log/update_online_aggr_tables.log 2>&1 &\n  ```\n- For a specified date:\n  ``` bash\n  # e.g. 09-11-2019\n  /opt/ingestion/PRODREST/common/scripts/update_online_aggr_tables_STABLE.sh prod_trlog_online.service_audit prod_trlog_online.aggr_service_audit prod_trlog_online.aggr_service_audit_idx 20191109 >> /var/log/ingestion/PRODREST/online/log/update_online_aggr_tables.log 2>&1\n  ```\n- Run the rest of the steps\n#### Send Daily Duplicate Reports\nSends email reports to users for duplicate transaction IDS and leftover transactions in `prod_trlog_online.service_audit_stream`.\n**User**: `PRODREST`\n**Script Logs**: `-`\n**Script**: `-`\n**Alerts**:\n- Online_Ingestion GUID_Report Impala\n- Online_Ingestion GUID_Report JOB\n**Troubleshooting Steps**:\n- Check `/var/log/ingestion/PRODREST/online/log/online_report_duplicate_identical.log` for errors\n- You can safely skip this step if not running for the previous day\n- Sample execution:\n  ``` bash\n  /opt/ingestion/PRODREST/common/scripts/online_report_duplicate_identical_STABLE.sh  `date -d '-1 day' '+%Y%m%d'`  prod_trlog_online service_audit service_audit_duplicates >> /var/log/ingestion/PRODREST/online/log/online_report_duplicate_identical.log 2>&1 &\n  /opt/ingestion/PRODREST/common/scripts/report_duplicates_kudu_hbase_impala_STABLE.sh `date --date='-1 day' '+%Y%m%d'` prod_trlog_online.service_audit_stream prod_trlog_online.service_audit_old online >> /var/log/ingestion/PRODREST/online/log/report_duplicates_kudu_hbase_impala.log 2>&1 &\n  ```\n#### Duplicates between Impala and Kudu/HBase\nDelete data which exist both Impala and Kudu. Sometimes MergeBatch fails because YARN kills executors for exceeding memory limits. AS a result, transactions are inserted to impala and job fails before drop them from kudu and HBase\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/report_duplicates_kudu_hbase_impala.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/report_duplicates_kudu_hbase_impala_STABLE.sh`\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Check `/var/log/ingestion/PRODREST/online/log/report_duplicates_kudu_hbase_impala.log` for errors\n- You can safely skip this step if not running for the previous day\n- Sample execution:\n  ``` bash\n  /opt/ingestion/PRODREST/common/scripts/report_duplicates_kudu_hbase_impala_STABLE.sh `date --date='-1 day' '+%Y%m%d'` prod_trlog_online.service_audit_stream prod_trlog_online.service_audit_old online >> /var/log/ingestion/PRODREST/online/log/report_duplicates_kudu_hbase_impala.log 2>&1\n  ```\n### Hourly Merge to Intermediate Table\nEvery hour a  transfers transactions ingested by the [Stream](#stream) flow to an intermediate table and without deleting the data from the original tables. This table is used by mno to query the latest transactions.\n``` mermaid\n  graph TD\n  A[Kudu: prod_trlog_online.service_audit_stream] --> B[Spark: PROD_Online_MergeBatch_Hourly]\n  C[HBase: PROD_ONLINE:SERVICE_AUDIT_STREAM] --> B\n  B --> D[Impala: prod_trlog_online.service_audit_hourly]\n  ```\n**User**: `PRODREST`\n**Spark Logs**: Use Firefox on `dr1edge01.mno.gr`/`pr1edge01.mno.gr` to access the logs via YARN Resource Manager UI\n**Alerts**:\n- Not Monitored*\n**Troubleshooting Steps**:\n- Use the spark logs to identify the cause of the failure\n- The data in the Hourly tables is only for the current day. No need to fill missing hours, as the next MergeBatch will insert the data to the final table.\n## Queries\nDetails the query layer used by Online applications to fetch transaction records through Impala via REST APIs hosted in Wildfly.\nThe ingested data are queried in order to be displayed by the Online application (used by branches). The queries are submitted to the cluster as HTTP requests using the same Wildfly instances as the [Stream](#stream) flow.\n```mermaid\n  graph TD\n  A[Online Backend Servers] -->|HTTP Requests| B[Load Balancer - Netscaler]\n  B -->|Active| C[pr1edge01.mno.gr]\n  B -->|Active| D[pr1edge02.mno.gr]\n  B -.->|Stopped| E[dr1edge01.mno.gr]\n  B -.->|Stopped| F[dr1edge02.mno.gr]\n  C -->|Impala JDBC | G[Primary Site]\n  D -->|Impala JDBC | G\n  E -.->|Stopped| H[Disaster Site]\n  F -.->|Stopped| H\n```\n**User**: `PRODREST`\n**Installation Path**: `/opt/wildfly/default/prodreston`\n**Deployments Path**: `/opt/wildfly/default/prodreston/standalone/deployments`\n**General Configuration Path**: `/opt/wildfly/default/prodreston/standalone/configuration/standalone.xml`\n**Application Configuration Path**: `/opt/wildfly/default/prodreston/standalone/configuration/BigStreamer/beanconfig/translogApiOnlineJmxConfig.xml`\n**Application Logs**: `/var/log/wildfly/prodreston/server.log`\n**Access Log**: `/var/log/wildfly/prodreston/access.log`\n**Instructions for start/stop**: [Here](../procedures/manage_wildfly.md)\n**Instructions for migrating traffic to DR site**: [Here](../procedures/failover.md)\n**Alerts**:\n- [PR][ONLINE] Query Average Response Time\n- [DR][ONLINE] Query Average Response Time\n- [PR][ONLINE] Query Average Error rate\n- [DR][ONLINE] Query Average Error rate\n- [PR][ONLINE] REST Endpoints Average Response Time\n- [DR][ONLINE] REST Endpoints Average Response Time\n**Troubleshooting Steps**:\n- Check in Grafana dashboard `MONITORING/Monitoring Alerts` the charts that are in alerting state\n- Check if the response time is constant, a single query can increase the mean value of the response time. Check the access log for entries with large response time for the specific endpoint. If it is an isolated query the customer is not impacted.\n- Check application logs for error messages.\n- In case there are many errors in the application logs, try to restart the problematic Wildfly instance with the provided instructions.\n- If the logs do not indicate a specific problem, check for any problems regarding Impala/Kudu\n### Query Endpoints\nQueries regarding Online query Impala tables stored in both HDFS and Kudu.\n**Endpoints**:\n- dynamic search\n- by-id\n- by-core-fields\n- by-application\n- top-by-branchcode-clientusername\n- first-by-branchcode-computername\n- aggr-computernum-usernum-transnum-groupby-branchcode\n- aggr-transnum-groupby-branchcode-clientusername-by-branchcode\n- aggr-opcodenum-transnum-groupby-opclass\n- aggr-transnum-groupby-opclass-opcode-by-opclass\n## Retention Mechanism\nRetention scripts and cron jobs that purge old transaction data from Impala, HDFS, and HBase based on date thresholds to manage system size.\n### Impala Retention\n#### DEV\nEvery day (at **16:05 on DR site only** by **Cron**). This script drops partitions from impala table `dev_trlog_online.service_audit` older than 60 days.\n**User**: `DEVREST`\n**Script Logs**: `/var/log/ingestion/DEVREST/common/log/retention_mechanism_daily.log`\n**Script**: `/opt/ingestion/DEVREST/common/scripts/retention_mechanism_daily_STABLE.sh`\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- After the root cause for the failure is resolved, run manually the following command\n  ``` bash  \n  /opt/ingestion/DEVREST/common/scripts/retention_mechanism_daily_STABLE.sh >> /var/log/ingestion/DEVREST/common/log/retention_mechanism_daily.log 2>&1\n  ```\n### Additional Tables\nKudu table's `prod_trlog_online.service_audit_stream` partitions are maintained by an Oozie jobs every day. See section [Create next week kudu partitions](#create-next-week-kudu-partitions).\nParquet table's `prod_trlog_online.service_audit_hourly` partitions are dropped after each successful Merge run. See section [Drop hourly partitions](#drop-hourly-partitions).\n### HBase retention\nEvery day (at **16:15 in both sites** by **Cron**) This script deletes rows from hbase `PROD_ONLINE:SERVICE_AUDIT_STREAM` which refere to transactions inserted 7 days ago. Those rows may have been not deleted properly after merge batch job. To do so the topology queries rows from impala table `prod_trlog_online.service_audit` inside partition with par_dt refering 7 days ago.\n**User**: `PRODREST`\n**Script Logs**: `/var/log/ingestion/PRODREST/online/log/daily_tools_cleanupHBaseSAS.log`\n**Script**: `/opt/ingestion/PRODREST/common/scripts/daily_tools_cleanupHBaseSAS.sh` on `dr1edge01.mno.gr`/`pr1edge01.mno.gr`\n**Alerts**:\n- Retention OnlineCleanupHbaseSAS JOB\n**Troubleshooting Steps**:\n- Use the script logs to identify the cause of the failure\n- After the root cause for the failure is resolved, check on `/opt/ingestion/PRODREST/no_bkp/duplicate_cid_hbase` if a manual re-run must be done for a specific date\n  - For a specified date eg 2022-06-30:\n    ``` bash\n    /opt/ingestion/PRODREST/common/spark/submit/submitmnoSparkTopology_tools_cleanupHbaseSAS prod_trlog_online.service_audit PROD_ONLINE:SERVICE_AUDIT_STREAM LIST 20220630\n    ```\n##  Oozie Jobs\nScheduled Oozie jobs for importing lookup tables and managing future Kudu partitions for Online service audit tables.\n###  Lookup tables\nEvery day (at 07:00 by Oozie on DR & PR site ), we transfers 3 tables with reference data from the legacy MSSQL server, which is managed by mno, to the cluster. We keep only latest version to BigData (no partition).\n**User**: `PRODREST`\n**Coordinator**: `Coord_OnlineLookupTables_PROD`\n**Workflow**: `ImportLookupTables`\n**Local path**: `/opt/ingestion/PRODREST/hdfs_mirror/lookupTables/import_lookup_tables.sh`\n**Logs**: from HUE\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Open Hue to find coordinator status and logs\n###  Create next week kudu partitions\nEvery day (at 10:10 by Oozie on DR site and 10:30 by Oozie on PR site ), we delete old Kudu partitions and add new Kudu partitions on `prod_trlog_online.service_audit_stream`.\n**User**: `PRODREST`\n**Coordinator**: `Coord_OnlineCreateKuduPartitionsPROD`\n**Workflow**: `CreateKuduPartitionsPROD`\n**Local path**: `/opt/ingestion/PRODREST/hdfs_mirror/create_kudu_partition/create_next_weeks_partitions.sh`\n**Logs**: from HUE\n**Alerts**:\n- Not Monitored\n**Troubleshooting Steps**:\n- Open Hue to find coordinator status and logs\nThere is a case that merge batch has not properly run for a specific date, **even though** the transactions for that specific date are present on impala `service_audit`. For example by moving a service_audit partiton from DR to PR or vice versa, or when merge batch failed **after** deleting transactions from kudu.\nIn that case we can manually mark merge batch as complete for that date, and therefore next oozie job created by `Coord_OnlineCreateKuduPartitionsPROD` will delete that partition from kudu, by manipulating HBase table `PROD_ONLINE:MERGE_BATCH_STATE_INFO`.\nExample for a specific date (10/10/2022):\n - Run HBase shell\n ```\n   hbase shell\n   ```\n - And then inside HBase shell:\n ```\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_hbase', 'true'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_hbase_time','0'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_kudu', 'true'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:drop_kudu_time', '0'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:running', 'false'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:running+time', '0'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:write_impala', 'true'\n   put 'PROD_ONLINE:MERGE_BATCH_STATE_INFO', 'MergeBatchInfoKey_20221010', 'MergaBatchState:write_impala_time', '0'\n   ```\n#### DEV\nEvery day (at **11:00 by Oozie** on **DR site only** ), we delete old Kudu partitions and add new Kudu partitions on `dev_trlog_online.service_audit_stream`.\n**User**: `DEVREST`\n**Coordinator**: `Coord_OnlineCreateKuduPartitionsDEV`\n**Workflow**: `CreateKuduPartitionsDEV`\n**Local path**: `/opt/ingestion/DEVREST/hdfs_mirror/create_kudu_partition/create_next_weeks_partitions.sh`\n**Logs**: from HUE\n**Alerts**:\n- Not Monitored"
          },
          {
            "question": "How do I perform an OS upgrade for Oracle Linux 7.9 on BigStreamer edge nodes using Nexus repositories?",
            "answer": "Login to the node, clean cache, check updates, and perform the upgrade with:\n```bash\nyum clean all\nyum check-update\nyum update\nsystemctl reboot\ncat /etc/oracle-release\n```",
            "category": "Infrastructure & Deployment",
            "files": "os_upgrade.md",
            "context": "---\ntitle: Oracle Linux 7.9 Edge Node OS Upgrade Procedure\ndescription: Procedure for performing minor version updates of Oracle Linux 7.9 on BigStreamer PR and DR edge nodes using Nexus-sourced YUM repositories, including rollback and repository configuration.\ntags:\n  - os-upgrade\n  - oracle-linux\n  - yum\n  - nexus\n  - edge-nodes\n  - rollback\n  - security\n  - bigstreamer\nlast_updated: 2025-05-01\nauthor: ilpap\ncontext:\n  environment: BigStreamer\n  os_version: Oracle Linux 7.9\n  nodes:\n    - pr1edge01\n    - pr1edge02\n    - dr1edge01\n    - dr1edge02\n  repositories:\n    - el7_uek_latest\n    - uek_release_4_packages\n    - ol7_9_latest\n    - ol7_9_epel\n  nexus_url: http://999.999.999.999:8081\n  internal_links:\n    - https://metis.ghi.com/obss/oss/sysadmin-group/mno/cloudera-cluster/-/blob/master/Documentation/MOP/21324_security_vulnerabilities_v3.docx\n---\n# OS Upgrade\nThis procedure details how to upgrade Oracle Linux 7.9 on PR/DR edge nodes using Nexus YUM repositories. It includes package preparation, clean upgrade commands, repository setup, and rollback steps, along with a reference to cluster resource switchover guidelines.\nAll procedures pertain to PR and DR edge nodes:\n- pr1edge01\n- pr1edge02\n- dr1edge01\n- dr1edge02\n## Minor OS Version Update on Edge Nodes\nOS packages are sourced from the mno Nexus Repository, which in itself is a yum proxy\nto the official oracle repositories for Oracle Linux 7.9. As such updating them requires only putting\nan edge node on standby and updating through **YUM**:\n```bash\n$ ssh Exxxx@XXXedgeXX\n$ sudo -i\n```\nFollow the procedures described in the **Switchover of Cluster Resources** chapter\nof the **Security Vulnerabilities** MOP [here](https://metis.ghi.com/obss/oss/sysadmin-group/mno/cloudera-cluster/-/blob/master/Documentation/MOP/21324_security_vulnerabilities_v3.docx).\n```bash\n# yum clean all\n# yum check-update\n```\nAfter reviewing the packages that will be updated continue with the update and after it is\ncomplete unstandby the node:\n```bash\n# yum update\n# systemctl reboot\n# cat /etc/oracle-release\n```\n## Rollback to Previous Packages\nLogin to each edge node and downgrade using **YUM**:\n```bash\n$ ssh Exxxx@XXXedgeXX\n$ sudo -i\n# yum clean all\n# yum downgrade\n# reboot\n# cat /etc/oracle-release\n```\n## Configure Nexus YUM Repositories\nMake sure that OS packages are sourced from the already setup Nexus repository.\nLogin to each edge node and edit/create the following repositories accordingly:\n```bash\n$ ssh Exxxx@XXXedgeXX\n$ sudo \u2013i\n# cd /etc/yum.repos.d\n# vi el7_uek_latest.repo\n[el7_uek_latest]\nname = el7_uek_latest\nbaseurl = http://999.999.999.999:8081/repository/el7_uek_latest/\nenabled = 1\ngpgcheck = 0\nexclude=postgresql*\n# vi uek_release_4_packages.repo\n[uek_release_4_packages]\nname = uek_release_4_packages\nbaseurl = http://999.999.999.999:8081/repository/uek_release_4_packages/\nenabled = 1\ngpgcheck = 0\nexclude=postgresql*\n# vi ol7_9_latest.repo\n[ol7_9_latest]\nname = ol7_9_latest\nbaseurl = http://999.999.999.999:8081/repository/latest_packages/\nenabled = 1\ngpgcheck = 0\nexclude=postgresql*\n# vi ol7_9_epel.repo\n[ol7_9_epel]\nname = ol7_9_epel\nbaseurl = http://999.999.999.999:8081/repository/latest_epel_packages/\nenabled = 1\ngpgcheck = 0\nexclude=postgresql*\n```"
          },
          {
            "question": "How is Radius session data processed and stored using Hive and Kudu?",
            "answer": "Radius data from SFTP is loaded into Hive staging tables, joined with reference data, and inserted into final Impala and Kudu tables. For example, `radacct` files are processed into `radius.radacct_stg`, joined with reference tables, and written to `radius.radacct`.",
            "category": "Data Management & Query Execution",
            "files": "radius.md",
            "context": "---\ntitle: Radius ETL Flow and Kudu Housekeeping\nsystem: BigStreamer\ncomponent: Radius\njob_name: Radius_Load_Workflow\nsource_system: SFTP Server (prdts)\nsource_tables:\n  - radarchive CSV files\n  - radacct CSV files\ndestination_system: Hive & Kudu\ndestination_tables:\n  - radius.radarchive\n  - radius.radacct\n  - radius.radreference\nschedule: every 1h and 30min\ncoordinator: Radius_Load_Coordinator\nworkflow: Radius_Load_Workflow\nscript_path: /user/radius\nmonitoring_table: monitoring.jobstatus\nowner: radius\ntags:\n  - Radius\n  - ETL\n  - radarchive\n  - radacct\n  - Kudu\n  - Hive\n  - BigStreamer\n  - SFTP\n  - Monitoring\n  - Oozie\n  - Retention\n  - Impala Stats\n  - Workflow Troubleshooting\n---\n# Radius\nThe Radius ETL process ingests user accounting data and session logs from the Trustcenter SFTP server. It transforms and loads the files into Hive and Kudu tables through hourly workflows and maintains data freshness using regular housekeeping and statistics recomputation.\n## Main Flow\nThis section describes the main ETL pipeline of the Radius flow, which loads and processes radarchive and radacct CSVs from an external SFTP server into Hive and Kudu tables.\n``` mermaid\n    graph TD\n    subgraph AA[Startup]\n      direction TB\n      AA1(\"Cleanup HDFS Folder:\" /ez/warehouse/radius.db/tmp)-->\n      AA2(\"Create Local Folder:\" ./sftp_files)-->\n      AA3(\"Create Local Folder:\" ./exported_files)-->\n      AA4(\"Housekeep Trustcenter SFTP server\")\n    end\n    subgraph AB[Load]\n      AB1(\"SFTP Server\") -->|Excluding:<br>Non-valid filenames<br>Files with suffix .LOADED<br>Files older than `days_back` according to filename | AB2(\"Temporary Directory on Nodemanager: ./sftp_files\")\n      AB1 -->|Add suffix .LOADED to<br>filenames in HDFS file:<br>/user/radius/unrenamed_files|AB1\n      AB2 -->|Decompress| AB3(\"Temporary Directory on Nodemanager: ./sftp_files\")\n    end\n    subgraph AC[radarchive]\n      AC1(\"HDFS Staging Directory: /ez/warehouse/radius.db/tmp\") -->|Hive LOAD|AC2(\"Hive: radius.radarchive_stg\")\n      AC2 -->|Refresh/Impala Insert|AC3(\"Impala: radius.radarchive\")\n      AC2 -->|Refresh/Impala Upsert<br>Reduced fields|AC4(\"Kudu: radius.radreference\")\n    end\n    subgraph AD[radacct]\n      subgraph ADA[File Export]\n        direction TB\n        AD1(\"HDFS Staging Directory: /ez/warehouse/radius.db/tmp\") -->|Hive LOAD|AD2(\"Hive: radius.radacct_stg\")\n        AD6(\"npce.fixed_super_repo<br>Responsibility: abc\") -->AD8\n        AD7(\"demo.dummy_radius_dslams<br>Responsibility: abc\") -->AD8\n        AD2 --> AD8(\"Join\")\n        AD8 -->|Refresh/Impala Select|AD9(\"Temporary Directory on Nodemanager:<br> ./exported_files/radacct_enriched_yearMonthDay_startHour-endHour.csv\")\n        AD9 -->|SFTP Put|AD10(\"Trustcenter SFTP\")\n      end\n      subgraph ADB[Populate Table]\n        direction TB\n        AD3(\"Kudu: radius.radreference\") -->AD4\n        AD11(\"Hive: radius.radacct_stg\") -->AD4(\"Join on username\")\n        AD4 -->|Refresh/Impala Insert|AD5(\"Impala: radius.radacct\")\n      end\n      AD10 -.->|On successful SFTP PUT<br>Populate the table| AD3\n    end\n    subgraph AE[Finish]\n      AE1(\"SFTP Server: Add suffix .LOADED to file\")\n    end\n    AA4 --> AB1\n    AB3 -->|Filename: radarchive_yearMonthDay_startHour-endHour.csv|AC1\n    AB3 -->|Filename: radacct_yearMonthDay_startHour-endHour.csv|AD1\n    AC4 -->|On Success|AE1\n    AD5 -->|On Success|AE1\n```\n- **User**: `radius`  \n- **Coordinator**: `Radius_Load_Coordinator`  \n- **Workflow**: `Radius_Load_Workflow`\n- **HDFS path**: `/user/radius`\n- **Runs**: `every 1h and 30mins`\n- **Config file**: `HDFS: /user/radius/config/settings_prod.ini`\n- **Logs**: From Hue go to `Job Browser -> Workflows` and filter with the workflow name\n- **Input SFTP Server**:\n  - **Host**: `999.999.999.999`\n  - **Port**: `22`\n  - **User**: `prdts`\n  - **Remdef Files Folder**: `/home/prdts/transfer`\n  - **Port Forward**:\n    - **Host**: `un-vip.bigdata.abc.gr`\n    - **Port**: `2222`\n- **Trustcenter SFTP Server**:\n  - **Host**: `unc2.bigdata.abc.gr`\n  - **Port**: `22`\n  - **User**: `trustcenterftp`\n  - **Remdef Files Folder**: `/rd`\n**Alerts**:\n- Mail\n  - Subject: Radius Flow failed\n  - Alerts that indicate problem with Input SFTP server:\n    - Body starts with: `No upcoming files for more than 3h`\n    - Body starts with: `Files found with a late timestamp.`\n    - Body starts with: `Could not rename file`\n  - Alerts that indicate problem with Trustcenter SFTP Server:\n    - Body starts with: `Could not perform radacct_enriched housekeeping on sftp server`\n  - Alerts that indicate general failures without specific cause:\n    - Body starts with: `Insert data failed` and then lists the status for each file\n**Troubleshooting Steps**:\n- If an alert has been received, use the message from the e-mail to determine the root cause for the failure.\n  - For failures with Input SFTP server:\n    - Inform abc in order to check the Input SFTP Server\n    - If abc does not detect any problems, check connectivity:\n      From `un2.bigdata.abc.gr` with personal user:\n      ``` bash\n      su - radius\n      sftp prdts@999.999.999.999\n      # Check for files\n      sftp> ls -l\n      ```\n  - For failures with Trustcenter SFTP Server:\n    - Check `unc2.bigdata.abc.gr` for any errors\n- If no alerts have been received or the problem is not specified determine the root cause for the failure with the following steps:\n  - Check for failed executions\n    From `un2.bigdata.abc.gr` with personal user:\n    ```bash\n    curl --location --request GET 'http://un-vip.bigdata.abc.gr:12800/monitoring/api/jobstatus/find?application=RADIUS&status=FAILED&operativePartition=<date in YYYYMMDD e.g.:20220518>'\n    ```\n    For additional query parameters check [here](https://metis.ghi.com/obss/bigdata/common-dev/apps/monitoring/monitoring-devops/-/wikis/API-Functional-Spec#fields)\n    or check via the corresponding [Grafana dashboard](https://unc1.bigdata.abc.gr:3000/d/J4KPyBoVk/radius-dashboard?orgId=1&from=now-2d&to=now)\n  - Check the logs for the failed execution.\n- After the underlying problem has been corrected the next execution of the flow will load any files that have been delayed or failed to be loaded in a previous execution.\n- If the customer requests to load specific files after they have been processed by the flow. **In order to avoid duplicate data we have to reload the whole partition.**\n  - Ensure the files are still available on the SFTP server\n    From `un2.bigdata.abc.gr` with personal user:\n    ``` bash\n    su - radius\n    sftp prdts@999.999.999.999\n    # Check for files covering the whole date affected\n    sftp> ls -l *.LOADED\n    ```\n  - Suspend coordinator `Radius_Load_Coordinator`\n  - Drop partitions that were not properly loaded from following tables\n    From `un2.bigdata.abc.gr` with personal user:\n    ``` bash\n    su - radius\n    kinit -kt /home/users/radius/radius.keytab radius\n    impala-shell -i un-vip.bigdata.abc.gr -k --ssl\n    ```\n    - In case of radarchive category of file:\n      ```sql\n      alter table radius.radarchive drop partitions (par_dt=\"<date in YYYYMMDD e.g.: 20220915>\")\n      ```\n    - In case of radacct category of file:\n      ```sql\n      alter table radius.radacct drop partitions (par_dt=\"<date in YYYYMMDD e.g.: 20220915>\")\n      ```\n  - Connect to SFTP server and rename files with filename timestamp equal to above-mentioned partition(s) and the same category:\n    From `un2.bigdata.abc.gr` with personal user:\n    ``` bash\n    su - radius\n    sftp prdts@999.999.999.999\n    # For every file you need to reload\n    sftp> rename <filename>.LOADED <filename>\n    ```\n  - Resume coordinator `Radius_Load_Coordinator`\n## Kudu Housekeeping and Compute Statistics Flow\nThis secondary flow enforces retention on the Kudu table radius.radreference and recomputes Impala statistics for radarchive and radacct daily.\n```mermaid\n  graph TD\n  A[Apply 5-day rention to<br>Kudu: radius.radreference]\n  B[Compute Impala Statistics for<br>radius.radarchive<br>radius.radacct]\n```\n- **User**: `radius`  \n- **Coordinator**: `Radius_Kudu_Retention_Coordinator` \n- **Workflow**: `Radius_Kudu_Retention_Workflow`\n- **HDFS path**: `/user/radius`\n- **Runs**: `once a day at 2:25 (UTC)`\n- **Config file**: `hdfs: /user/radius/Kudu_Retention_And_Compute_Stats/settings.ini`\n- **Logs**: From Hue go to `Job Browser -> Workflows` and filter with the workflow name\n**Alerts**:\n- Not monitored\n**Troubleshooting Steps**:\n- Check the logs for the failed execution.\n- After the underlying problem has been corrected the next execution of the flow will apply the correct retention to the Kudu table and compute the missing statistics."
          },
          {
            "question": "What command can I use to manually trigger a reference data load for CRM on a specific date?",
            "answer": "To load CRM data for 20220209, run:\n```bash\n/shared/abc/refdata/bin/210_refData_Load.sh CRM 20220209\n```",
            "category": "Data Management & Query Execution",
            "files": "Reference_Data_Flow.md",
            "context": "---\ntitle: Reference Data ETL Flow\nsystem: BigStreamer\ncomponent: Reference Data\njob_name: refdata_etl\nsource_system: Local Filesystem (vantagerd)\nsource_tables:\n  - cells_YYYYMMDD.csv.gz\n  - crm_YYYYMMDD.csv.gz\n  - devices_YYYYMMDD.csv.gz\n  - services_YYYYMMDD.csv.gz\ndestination_system: Hive\ndestination_tables:\n  - refdata.rd_cells_load\n  - refdata.rd_services_load\n  - refdata.rd_crm_load\n  - refdata.rf_devices_load\nschedule: daily at 00:05\ncoordinator: none (cron-based)\nworkflow: 210_refData_Load.sh / 220_refData_Daily_Snapshot.sh\nscript_path: /shared/abc/refdata/bin\nmonitoring_table: none\nowner: intra\ntags:\n  - Reference Data\n  - refdata\n  - rd_cells_load\n  - rd_crm_load\n  - rd_services_load\n  - rf_devices_load\n  - Hive\n  - Snapshot\n  - Crontab\n  - Bash Scripts\n  - Troubleshooting\n  - Data Validation\n  - Vantagerd\n---\n# Reference Data Flow\nThis document describes the reference data ingestion process for cells, CRM, devices, and services. It includes file locations, loading scripts, cron scheduling, Hive targets, and troubleshooting steps.\n## Installation info\nDescribes the input/output directories, involved nodes and users, script and log locations, and crontab setup for automatic file loading.\n### Data Source File\n- Local FileSystem Directories\n  - host :`un2.bigdata.abc.gr (999.999.999.999)`\n  - user : `vantagerd`\n  - spool area : `/data/1/vantage_ref-data/REF-DATA/` link points to `/shared/vantage_ref-data/REF-DATA`\n  - file_types : `<refType>_<refDate>.csv.gz`  \n*\\<refType\\>: `cells, crm, devices, services` (i.e. cells_20230530.csv.gz)*\n  - load_suffix : `<YYYYMMDD>.LOADED` *(i.e. cells_20230530.csv.cells_20230531.LOADED)*\n- HDFS Directories\n\t- hdfs landingzone : `/ez/landingzone/REFDATA`\n### Scripts-Logs Locations\n- node : `un2.bigdata.abc.gr (999.999.999.999)`\n- user : `intra`\n- script path : `/shared/abc/refdata/bin`\n- script files: \n\t- `210_refData_Load.sh`\n\t- `220_refData_Daily_Snapshot.sh`\n- log path : `/shared/abc/refdata/log`\n- log files: \n\t- `210_refData_Load.<YYYYMM>.log`\n\t- `220_refData_Daily_Snapshot.<YYYYMM>.log`\n### Crontab Scheduling\n- node : `un2.bigdata.abc.gr (999.999.999.999)`\n- user : `intra`  \n\truns at : Daily at 00:05\n\t`5 0 * * * /shared/abc/refdata/bin/210_refData_Load.sh CELLS $(date '+\\%Y\\%m\\%d' -d \"yesterday\")`\nNdef1: The entry above loads reference data for CELLS.  \nNdef2: For each reference type a new entry of the `210_refData_Load.sh` is required passing the following parameters  \n\t\\<reference Type\\> : `cells, crm, devices, services`  \n\t\\<reference Date\\> : `yesterday` is the default value  \n### Hive Tables\n- Target Database: `refdata`\n- Target Tables: \n\t1. `rd_cells_load`\n\t1. `rd_services_load`\n\t1. `rd_crm_load`\n\t1. `rf_devices_load`\n| Table Name         | Description                      |\n|--------------------|----------------------------------|\n| rd_cells_load      | Historical data of cell metadata |\n| rd_services_load   | Historical data of services      |\n| rd_crm_load        | Historical data of CRM records   |\n| rf_devices_load    | Historical data of device info   |\n## Data process\nHigh-level overview of how reference files are prepared, parsed, and loaded into historical and snapshot Hive tables.\n### High Level Overview\n![High_Level_Overview](https://metis.ghi.com/obss/bigdata/abc/alarm-archiving/refdata/-/raw/main/docs/ReferenceData.High_Level_Overview.png)\n##### Steps 1-3: \nabc is responsible for the preparation/creation of the Reference Data flat files.  \nThese files are stored into a specific directory in `UN2` node using the SFTP-PUT method as user `vantagerd`  \n##### Steps 4-5:\nScript `210_refData_Load.sh` is responsible to read, parse and load the contents of reference files into HIVE tables (aka LOAD tables).  \nThese tables keep the data of all completed loads. That is, they contain all the historicity of the reference data.  \nThe data of each load is stored in a separate partition identified by the date of the loading (i.e. par_dt=20230530)  \n##### Steps 6-7:\nScript `220_refData_Daily_Snapshot.sh` reads the most recently added data from the LOAD table and store them as a snapshot into a separate table (aka snapshot tables).  \nThe data of these tables are used for the enrichment of various fact data (i.e. Traffica (SAI))\n## Manually Run\nInstructions for manually triggering the data load process for a specific file and date using the load script.\n`210_refData_Load.sh` script is responsible for the loading of a reference file.\nTo run the script two arguments are required  \n`/shared/abc/refdata/bin/210_refData_Load.sh <refType>  <refDate>`  \n1st: **\\<refType\\>**, the Reference Type\n```\n- CELLS\n- CRM\n- DEVICES\n- SERVICES\n```\n2nd: **\\<refDate\\>**, the date that the flat file contains in its filename  \n\ti.e.\n```\ncells_20220207.csv.gz\ncells_20220208.csv.gz\ncells_20220209.csv.gz\nservices_20220207.csv.gz\ndevices_20220208.csv.gz\ncrm_20220209.csv.gz\n```\nIn case of loading the files above we should execute the following commands\n```bash\n/shared/abc/refdata/bin/210_refData_Load.sh CELLS 20220207\n/shared/abc/refdata/bin/210_refData_Load.sh cells 20220208\n/shared/abc/refdata/bin/210_refData_Load.sh CELLS 20220209\n/shared/abc/refdata/bin/210_refData_Load.sh services 20220207\n/shared/abc/refdata/bin/210_refData_Load.sh DEVICES 20220208\n/shared/abc/refdata/bin/210_refData_Load.sh crm 20220209\n```\nOnce the loads completed, the flat files renamed to <CURRENT_YYYYMMDD>.LOADED\n```\ncells_20220207.csv.20230531.LOADED\ncells_20220208.csv.20230531.LOADED\ncells_20220209.csv.20230531.LOADED\nservices_20220207.csv.20230531.LOADED\ndevices_20220208.csv.20230531.LOADED\ncrm_20220209.csv.20230531.LOADED\n```\n## Troubleshooting\nExplains how to identify and resolve issues with reference data loads using error logs and manual script execution.\n**Currently, the Reference Data flow does not support the `Monitoring` services.**  \n- An email will be sent by the system with the point of failure.\ni.e.\n```\nSubject: ALERT: Reference data Loading, Type:CELL,  File:cells_20220207.csv\nBody: \n\tReference Type  : CELL\n\tReference File  : cells_20220207.csv\n\tReference Scirpt: 210_refData_Load.sh\n\t------------------------------------------\n\tERROR:$(date '+%F %T'), ALTER TABLE or LOAD DATA command failed.\n```\n- Check the log files for errors/exceptions  \n```bash\negrep -i 'error|fail|exception|problem' /shared/abc/refdata/log/210_refData_Load.YYYYMM.log\negrep -i 'error|fail|exception|problem' /shared/abc/refdata/log/220_refData_Daily_Snapshot.YYYYMM.log\n```\nIn case of failure follow the instructions described in **`Manually Run`**\n### Common errors  \n- Reference data file is empty or the contents of the file is not the expected.  \nIf this is the case, update abc that the file is invalid and ask them to send a new.  \n- Other factors not related to the specific flow\n\t- impala/hive availability\n\t- Kerberos authentication\n\t*Ndef: The flow checks if the ticket is still active before any HDFS action.  \n\tIn case of expiration the flow performs a `kinit` command*\n## Data Check\nProvides queries and instructions to verify data load completeness and partition existence in Hive tables.\n- **Check final tables for new partitions**:\n\t```\n\tsu - intra\n\t/usr/bin/impala-shell -i un-vip.bigdata.abc.gr --ssl -k -q \"refresh refdata.rd_cells_load; show partitions refdata.rd_cells_load;\"\n\t\n\t+----------+-----------+--------+---------+\n\t| par_dt   | #Rows     | #Files | Size    |\n\t+----------+-----------+--------+---------+\n\t| 20220227 | 98090     | 1      | 41.88MB |\n\t| 20220228 | 98021     | 1      | 41.84MB |\n\t| 20220301 | 97353     | 1      | 41.76MB |\n\t| Total    | 142404322 | 1500   | 59.63GB |\n\t+----------+-----------+--------+---------+\n\t```\n- **Check the amount of data in final tables**:\n```bash\nsu - intra\n/usr/bin/impala-shell -i un-vip.bigdata.abc.gr --ssl -k -q \"select par_dt, count(*) as cnt from refdata.rd_cells_load group by par_dt order by 1;\"\n\tpar_dt   | cnt    \n\t---------+--------\n\t20221130 | 2784494\n```"
          }
    ]
}